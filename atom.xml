<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ㄅㄆㄇㄈ</title>
  <icon>https://sulfurandcu.github.io/sulfurandcu.io/icon.png</icon>
  <subtitle>bopomofo</subtitle>
  <link href="https://sulfurandcu.github.io/sulfurandcu.io/atom.xml" rel="self"/>
  
  <link href="https://sulfurandcu.github.io/sulfurandcu.io/"/>
  <updated>2024-12-05T10:45:59.000Z</updated>
  <id>https://sulfurandcu.github.io/sulfurandcu.io/</id>
  
  <author>
    <name>刘汲桐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>把 RT-THREAD 设备框架移植到裸机平台</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/cm4aw35rg000270rq43hj5g6x.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/cm4aw35rg000270rq43hj5g6x.html</id>
    <published>2024-12-05T10:45:59.000Z</published>
    <updated>2024-12-05T10:45:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>这 RT-THREAD 的设备框架确实是个好东西，能不能移植到裸机工程上，为我 bootloader 所用呢😏？</p><p>事实证明可以😎！</p><p><img src="/sulfurandcu.io/cm4aw35rg000270rq43hj5g6x/architecture.png"></p><span id="more"></span><h2 id="移植前（向下调用机制）"><a href="#移植前（向下调用机制）" class="headerlink" title="移植前（向下调用机制）"></a>移植前（向下调用机制）</h2><p><img src="/sulfurandcu.io/cm4aw35rg000270rq43hj5g6x/now.png"></p><h2 id="移植后（向上注册机制）"><a href="#移植后（向上注册机制）" class="headerlink" title="移植后（向上注册机制）"></a>移植后（向上注册机制）</h2><p><img src="/sulfurandcu.io/cm4aw35rg000270rq43hj5g6x/redesign.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这 RT-THREAD 的设备框架确实是个好东西，能不能移植到裸机工程上，为我 bootloader 所用呢😏？&lt;/p&gt;
&lt;p&gt;事实证明可以😎！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sulfurandcu.io/cm4aw35rg000270rq43hj5g6x/architecture.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>项目代码管理方案</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/cm4azoo32001n70rqdt923mqq.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/cm4azoo32001n70rqdt923mqq.html</id>
    <published>2024-11-22T12:12:46.000Z</published>
    <updated>2024-11-22T12:12:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/sulfurandcu.io/cm4azoo32001n70rqdt923mqq/solution.png"></p><center><b>“项目化交付”模式下的“基线产品化”方案</b></center><br><span id="more"></span><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p><img src="/sulfurandcu.io/cm4azoo32001n70rqdt923mqq/current_situation.png"></p><ul><li>模块、创新、成果分散在各个项目中，难以维护、继承、复用、持续优化。</li><li>修复的缺陷无法继承，重复的问题一而再，再而三出现，项目质量难以保证。</li><li>重复的工作，开发体验差。</li></ul><h2 id="可行的方案"><a href="#可行的方案" class="headerlink" title="可行的方案"></a>可行的方案</h2><p><img src="/sulfurandcu.io/cm4azoo32001n70rqdt923mqq/solution_dir.png"></p><ol><li>建立组件库和基线库：</li></ol><ul><li>组件库<ul><li>软件复用模块</li><li>实时操作系统</li><li>硬件标准接口</li><li>硬件平台驱动</li><li>硬件设备驱动</li></ul></li><li>基线库<ul><li>升级引导程序基线工程（bootloader）</li><li>裸机循环系统基线工程（NoOS）</li><li>实时操作系统基线工程（RTOS）</li><li>通用操作系统基线工程（Linux *optional）</li></ul></li></ul><ol start="2"><li>现有的项目经过整合、汇总，形成项目库：</li></ol><ul><li>项目库<ul><li>项目Ａ</li><li>项目Ｂ</li><li>项目Ｃ</li></ul></li></ul><ol start="3"><li>后期新的项目在基线工程的基础上创建</li><li>在各个项目上所做的优化、创新，要及时回馈到「基线工程」和「组件库」中。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/sulfurandcu.io/cm4azoo32001n70rqdt923mqq/solution.png&quot;&gt;&lt;/p&gt;
&lt;center&gt;&lt;b&gt;“项目化交付”模式下的“基线产品化”方案&lt;/b&gt;&lt;/center&gt;&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Kconfig</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/cm0n3u4b4000mo4rqa9febgd1.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/cm0n3u4b4000mo4rqa9febgd1.html</id>
    <published>2024-09-04T09:17:34.000Z</published>
    <updated>2024-09-04T09:17:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/sulfurandcu.io/cm0n3u4b4000mo4rqa9febgd1/Kconfig.png"></p><table><thead><tr><th align="center">开发平台</th><th align="center">Embedded-RTOS</th><th align="center">Embedded-NoOS</th><th align="center">Embedded-Linux</th></tr></thead><tbody><tr><td align="center">linux</td><td align="center"><strong>kconfiglib.menuconfig</strong><br>Kconfig<br>makefile&#x2F;sconscript</td><td align="center"><strong>kconfiglib.menuconfig</strong><br>Kconfig<br>makefile&#x2F;sconscript</td><td align="center"><strong>kconfiglib.menuconfig</strong><br>Kconfig<br>makefile&#x2F;sconscript</td></tr><tr><td align="center">windows</td><td align="center"><strong>windows-curses</strong><br><strong>kconfiglib.menuconfig</strong><br>Kconfig<br>makefile&#x2F;sconscript<br>or<br><strong>env-windows</strong><br>Kconfig<br>makefile&#x2F;sconscript</td><td align="center"><strong>windows-curses</strong><br><strong>kconfiglib.menuconfig</strong><br>Kconfig<br>makefile&#x2F;sconscript<br><br><br><br><br></td><td align="center"><strong>windows-curses</strong><br><strong>kconfiglib.menuconfig</strong><br>Kconfig<br>makefile&#x2F;sconscript<br><br><br><br><br></td></tr></tbody></table><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>Linux</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python -m pip install kconfiglib</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>/usr/local/bin</span></figcaption><table><tr><td class="code"><pre><span class="line">alldefconfig</span><br><span class="line">allmodconfig</span><br><span class="line">allnoconfig</span><br><span class="line">allyesconfig</span><br><span class="line">defconfig</span><br><span class="line">genconfig</span><br><span class="line">guiconfig</span><br><span class="line">listnewconfig</span><br><span class="line">menuconfig</span><br><span class="line">oldconfig</span><br><span class="line">olddefconfig</span><br><span class="line">savedefconfig</span><br><span class="line">setconfig</span><br></pre></td></tr></table></figure><p><strong>Windows</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python -m pip install kconfiglib</span><br><span class="line">python -m pip install windows-curses</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>..\python\Scripts\</span></figcaption><table><tr><td class="code"><pre><span class="line">alldefconfig.exe</span><br><span class="line">allmodconfig.exe</span><br><span class="line">allnoconfig.exe</span><br><span class="line">allyesconfig.exe</span><br><span class="line">defconfig.exe</span><br><span class="line">genconfig.exe</span><br><span class="line">guiconfig.exe</span><br><span class="line">listnewconfig.exe</span><br><span class="line">menuconfig.exe</span><br><span class="line">oldconfig.exe</span><br><span class="line">olddefconfig.exe</span><br><span class="line">savedefconfig.exe</span><br><span class="line">setconfig.exe</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">menuconfig -h</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">genconfig -h</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight txt"><figcaption><span>1. 新建 demo 工程</span></figcaption><table><tr><td class="code"><pre><span class="line">main.c</span><br><span class="line">Kconfig</span><br><span class="line">Makefile</span><br></pre></td></tr></table></figure><figure class="highlight txt"><figcaption><span>2. 使用 make 编译</span></figcaption><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make clean</span><br></pre></td></tr></table></figure><figure class="highlight txt"><figcaption><span>3. 手动打开配置界面</span></figcaption><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><h2 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h2><figure class="highlight c"><figcaption><span>example: main.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;config.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, world\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> CONFIG_FUNCTION_1_ENABLE</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CONFIG_FUNCTION_1_ENABLE\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> CONFIG_FUNCTION_1_1_ENABLE</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CONFIG_FUNCTION_1_1_ENABLE\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> CONFIG_FUNCTION_1_2_ENABLE</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CONFIG_FUNCTION_1_2_ENABLE\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> CONFIG_FUNCTION_1_3_ENABLE</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CONFIG_FUNCTION_1_3_ENABLE\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> CONFIG_FUNCTION_2_ENABLE</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CONFIG_FUNCTION_2_ENABLE\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> CONFIG_FUNCTION_2_1_ENABLE</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CONFIG_FUNCTION_2_1_ENABLE\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> CONFIG_FUNCTION_2_2_ENABLE</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CONFIG_FUNCTION_2_2_ENABLE\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> CONFIG_FUNCTION_2_3_ENABLE</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CONFIG_FUNCTION_2_3_ENABLE\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;USERNAME: %s\n&quot;</span>, CONFIG_USERNAME);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PASSWORD: %d\n&quot;</span>, CONFIG_PASSWORD);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>example: Kconfig</span></figcaption><table><tr><td class="code"><pre><span class="line">mainmenu <span class="string">&quot;Kconfig&quot;</span></span><br><span class="line"></span><br><span class="line">menu <span class="string">&quot;example&quot;</span></span><br><span class="line"></span><br><span class="line">config FUNCTION_1_ENABLE</span><br><span class="line">    <span class="type">bool</span> <span class="string">&quot;Function 1&quot;</span></span><br><span class="line">    <span class="keyword">default</span> n</span><br><span class="line">    help</span><br><span class="line">        Function <span class="number">1</span></span><br><span class="line"></span><br><span class="line">config FUNCTION_1_1_ENABLE</span><br><span class="line">    <span class="type">bool</span> <span class="string">&quot;Function 1.1&quot;</span></span><br><span class="line">    <span class="keyword">default</span> n</span><br><span class="line">    depends on FUNCTION_1_ENABLE</span><br><span class="line">    help</span><br><span class="line">        Function <span class="number">1.1</span></span><br><span class="line"></span><br><span class="line">config FUNCTION_1_2_ENABLE</span><br><span class="line">    <span class="type">bool</span> <span class="string">&quot;Function 1.2&quot;</span></span><br><span class="line">    <span class="keyword">default</span> n</span><br><span class="line">    depends on FUNCTION_1_ENABLE</span><br><span class="line">    help</span><br><span class="line">        Function <span class="number">1.2</span></span><br><span class="line"></span><br><span class="line">config FUNCTION_1_3_ENABLE</span><br><span class="line">    <span class="type">bool</span> <span class="string">&quot;Function 1.3&quot;</span></span><br><span class="line">    <span class="keyword">default</span> n</span><br><span class="line">    depends on FUNCTION_1_ENABLE</span><br><span class="line">    help</span><br><span class="line">        Function <span class="number">1.3</span></span><br><span class="line"></span><br><span class="line">config FUNCTION_2_ENABLE</span><br><span class="line">    <span class="type">bool</span> <span class="string">&quot;Function 2&quot;</span></span><br><span class="line">    <span class="keyword">default</span> n</span><br><span class="line">    help</span><br><span class="line">        Function <span class="number">2</span></span><br><span class="line"></span><br><span class="line">config FUNCTION_2_1_ENABLE</span><br><span class="line">    <span class="type">bool</span> <span class="string">&quot;Function 2.1&quot;</span></span><br><span class="line">    <span class="keyword">default</span> n</span><br><span class="line">    depends on FUNCTION_2_ENABLE</span><br><span class="line">    help</span><br><span class="line">        Function <span class="number">2.1</span></span><br><span class="line"></span><br><span class="line">config FUNCTION_2_2_ENABLE</span><br><span class="line">    <span class="type">bool</span> <span class="string">&quot;Function 2.2&quot;</span></span><br><span class="line">    <span class="keyword">default</span> n</span><br><span class="line">    depends on FUNCTION_2_ENABLE</span><br><span class="line">    help</span><br><span class="line">        Function <span class="number">2.2</span></span><br><span class="line"></span><br><span class="line">config FUNCTION_2_3_ENABLE</span><br><span class="line">    <span class="type">bool</span> <span class="string">&quot;Function 2.3&quot;</span></span><br><span class="line">    <span class="keyword">default</span> n</span><br><span class="line">    depends on FUNCTION_2_ENABLE</span><br><span class="line">    help</span><br><span class="line">        Function <span class="number">2.3</span></span><br><span class="line"></span><br><span class="line">config USERNAME</span><br><span class="line">    <span class="built_in">string</span> <span class="string">&quot;username&quot;</span></span><br><span class="line">    <span class="keyword">default</span> <span class="string">&quot;abc&quot;</span></span><br><span class="line">    help</span><br><span class="line">        Input a <span class="built_in">string</span> value.</span><br><span class="line"></span><br><span class="line">config PASSWORD</span><br><span class="line">    <span class="type">int</span> <span class="string">&quot;password&quot;</span></span><br><span class="line">    range <span class="number">0</span> <span class="number">255</span></span><br><span class="line">    <span class="keyword">default</span> <span class="number">123</span></span><br><span class="line">    help</span><br><span class="line">        Input a <span class="type">int</span> value. Range from <span class="number">0</span> to <span class="number">255.</span></span><br><span class="line"></span><br><span class="line">endmenu</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><figcaption><span>example: Makefile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">all: main.o</span></span><br><span class="line">gcc main.o -o main</span><br><span class="line"><span class="section">main.o: main.c config.h</span></span><br><span class="line">gcc main.c -c -o main.o</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm  main.o main</span><br><span class="line"></span><br><span class="line"><span class="section">config.h:.config</span></span><br><span class="line">genconfig --header-path config.h</span><br><span class="line"><span class="section">.config:</span></span><br><span class="line">menuconfig</span><br><span class="line"><span class="section">menuconfig:</span></span><br><span class="line">menuconfig</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/sulfurandcu.io/cm0n3u4b4000mo4rqa9febgd1/Kconfig.png&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;开发平台&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Embedded-RTOS&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Embedded-NoOS&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Embedded-Linux&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;linux&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;kconfiglib.menuconfig&lt;/strong&gt;&lt;br&gt;Kconfig&lt;br&gt;makefile&amp;#x2F;sconscript&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;kconfiglib.menuconfig&lt;/strong&gt;&lt;br&gt;Kconfig&lt;br&gt;makefile&amp;#x2F;sconscript&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;kconfiglib.menuconfig&lt;/strong&gt;&lt;br&gt;Kconfig&lt;br&gt;makefile&amp;#x2F;sconscript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;windows&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;windows-curses&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;kconfiglib.menuconfig&lt;/strong&gt;&lt;br&gt;Kconfig&lt;br&gt;makefile&amp;#x2F;sconscript&lt;br&gt;or&lt;br&gt;&lt;strong&gt;env-windows&lt;/strong&gt;&lt;br&gt;Kconfig&lt;br&gt;makefile&amp;#x2F;sconscript&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;windows-curses&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;kconfiglib.menuconfig&lt;/strong&gt;&lt;br&gt;Kconfig&lt;br&gt;makefile&amp;#x2F;sconscript&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;windows-curses&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;kconfiglib.menuconfig&lt;/strong&gt;&lt;br&gt;Kconfig&lt;br&gt;makefile&amp;#x2F;sconscript&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>通信模块设计说明</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/clz2cld8l000q1orq40fzah1z.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/clz2cld8l000q1orq40fzah1z.html</id>
    <published>2024-07-21T07:02:38.000Z</published>
    <updated>2024-07-21T07:02:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/sulfurandcu.io/clz2cld8l000q1orq40fzah1z/cover.png"></p><br><table><thead><tr><th align="center">特性概述</th><th align="center">详细说明</th></tr></thead><tbody><tr><td align="center">较强的接收容错能力</td><td align="center">自动从下一个起始符继续匹配</td></tr><tr><td align="center">丰富的协议解析能力</td><td align="center">同一个端口支持解析多种协议</td></tr><tr><td align="center">灵活的端口转发能力</td><td align="center">支持在任意端口之间相互转发（转发时支持协议转换）</td></tr><tr><td align="center">良好的协议扩展能力</td><td align="center">采用星形拓扑｜方便后期扩展</td></tr></tbody></table><span id="more"></span><h2 id="较强的接收容错能力"><a href="#较强的接收容错能力" class="headerlink" title="较强的接收容错能力"></a>较强的接收容错能力</h2><p><img src="/sulfurandcu.io/clz2cld8l000q1orq40fzah1z/receive.png"></p><p>接收并解析一个正常的数据帧是比较容易实现的，但是有时候我们往往会碰到一些变态的场景或者变态的用户需求，比如说在一堆乱码中混入一个正常帧，又或者是在一个半帧后面接一个正常帧，在这种情况下程序能否正常解析，就很考验程序设计的功力了。目前的方案是，从第一个起始符开始尝试与指定的协议进行匹配，如果匹配成功，则正常返回；如果匹配失败，则自动从下一个字节或者下一个起始符开始继续匹配，直到匹配成功。</p><h2 id="丰富的协议解析能力"><a href="#丰富的协议解析能力" class="headerlink" title="丰富的协议解析能力"></a>丰富的协议解析能力</h2><p><img src="/sulfurandcu.io/clz2cld8l000q1orq40fzah1z/protocol.png"></p><p>我个人认为一个端口只支持解析一种协议的设计是很鸡肋的，无法满足一些变态的用户需求。为此，本人设计了一套全新的通信系统，支持在同一个端口上解析多种协议。其原理为，从底层数据缓冲区中一个字节一个字节地读取数据，每拿取一个字节，就与协议库中的若干协议比对一次，直到比对成功。</p><h2 id="灵活的端口转发能力"><a href="#灵活的端口转发能力" class="headerlink" title="灵活的端口转发能力"></a>灵活的端口转发能力</h2><p><img src="/sulfurandcu.io/clz2cld8l000q1orq40fzah1z/transforward.png"></p><p>数据帧在单个端口内完成接收、解析、处理、响应的设计是比较简单的，而一旦涉及到转发，事情就变得复杂了。首先，要想在任意端口之间转发，就不能把端口分成上行、下行，左行、右行也不行，所有端口都应该是平等的，且遵循同一套规则。其次，两个端口所用的协议有很大可能是不同的，所以还需要支持协议转换。协议转换详见下一章节。</p><h2 id="良好的协议扩展能力"><a href="#良好的协议扩展能力" class="headerlink" title="良好的协议扩展能力"></a>良好的协议扩展能力</h2><p><img src="/sulfurandcu.io/clz2cld8l000q1orq40fzah1z/topology.png"></p><p>协议转换最容易想到的就是两两转换，不过两两转换在协议少的时候还好说，干就完了，但是后期若是要扩展第三个、第Ｎ个协议，两两转换的弊端就显现出来了，其工作量可是呈C₂ⁿ级增长的。而星形拓扑的设计则可以很好地解决这个问题。</p><table><thead><tr><th align="center">协议数量</th><th align="center">网状拓扑 O(C₂ⁿ)</th><th align="center">星形拓扑 O(n)</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">1</td><td align="center">2</td></tr><tr><td align="center">3</td><td align="center">3</td><td align="center">3</td></tr><tr><td align="center">4</td><td align="center">6</td><td align="center">4</td></tr><tr><td align="center">5</td><td align="center">10</td><td align="center">5</td></tr><tr><td align="center">6</td><td align="center">15</td><td align="center">6</td></tr></tbody></table><h2 id="通信模块的转发原理"><a href="#通信模块的转发原理" class="headerlink" title="通信模块的转发原理"></a>通信模块的转发原理</h2><p><img src="/sulfurandcu.io/clz2cld8l000q1orq40fzah1z/implementation.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/sulfurandcu.io/clz2cld8l000q1orq40fzah1z/cover.png&quot;&gt;&lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;特性概述&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;详细说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;较强的接收容错能力&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;自动从下一个起始符继续匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;丰富的协议解析能力&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;同一个端口支持解析多种协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;灵活的端口转发能力&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持在任意端口之间相互转发（转发时支持协议转换）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;良好的协议扩展能力&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;采用星形拓扑｜方便后期扩展&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>调试精灵使用说明</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/cly6m4gfj002qscrq77a5a7cn.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/cly6m4gfj002qscrq77a5a7cn.html</id>
    <published>2024-06-30T01:51:48.000Z</published>
    <updated>2024-06-30T01:51:48.000Z</updated>
    
    <content type="html"><![CDATA[<center><a href="https://code.visualstudio.com/Download">「这是一个内置 DLT645 规则解析引擎的协议测试工具」</a></center><br><p><img src="/sulfurandcu.io/cly6m4gfj002qscrq77a5a7cn/toolkit.dlt645.png"></p><span id="more"></span><h2 id="配置规则"><a href="#配置规则" class="headerlink" title="配置规则"></a>配置规则</h2><p>按照数据类型可分为：</p><ul><li>time</li><li>bcd</li><li>hex</li><li>bit</li><li>string</li><li>block</li></ul><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>数据格式为 YY、MM、DD、WW、hh、mm、ss 的自由组合。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;00000000&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;日期时间&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;time&quot;,</span><br><span class="line">    &quot;data&quot;: &quot;YYMMDDWWhhmmss&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="bcd"><a href="#bcd" class="headerlink" title="bcd"></a>bcd</h3><p>第一种：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;00000000&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;当前电压（Ａ相）（XXX.X）&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;bcd&quot;,</span><br><span class="line">    &quot;data&quot;: &quot;XXX.X&quot;,</span><br><span class="line">    &quot;unit&quot;: &quot;V&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>第二种（数据块）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;00000000&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;当前电压（整块）（XXX.X）　&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;bcd&quot;,</span><br><span class="line">    &quot;data&quot;: [</span><br><span class="line">        &quot;XXX.X&quot;,</span><br><span class="line">        &quot;XXX.X&quot;,</span><br><span class="line">        &quot;XXX.X&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;unit&quot;: &quot;V&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>如果数据块中的数据单位不一样，则建议使用 block 类型。</p></blockquote><h3 id="hex"><a href="#hex" class="headerlink" title="hex"></a>hex</h3><p>需要显示原数据的要使用 hex 类型：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;00000000&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;通信地址&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;hex&quot;,</span><br><span class="line">    &quot;data&quot;: &quot;XXXXXXXXXXXX&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>一些没有数据域的控制指令也可以使用 hex 类型：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;00000000&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;设备重启&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;hex&quot;,</span><br><span class="line">    &quot;data&quot;: &quot;&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="bit"><a href="#bit" class="headerlink" title="bit"></a>bit</h3><p>位解析配置如下：</p><ul><li>lsb：表示该位段的最低位</li><li>msb：表示该位段的最高位</li><li>XX.：表示该位段的枚举值（00 ~ FF）</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;00000000&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;有功组合方式特征字&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;bit&quot;,</span><br><span class="line">    &quot;data&quot;: &quot;XX&quot;,</span><br><span class="line">    &quot;bits&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;正向有功&quot;,</span><br><span class="line">            &quot;lsb&quot;: 0,</span><br><span class="line">            &quot;msb&quot;: 1,</span><br><span class="line">            &quot;00&quot;: &quot;不加不减&quot;,</span><br><span class="line">            &quot;01&quot;: &quot;加&quot;,</span><br><span class="line">            &quot;02&quot;: &quot;减&quot;,</span><br><span class="line">            &quot;03&quot;: &quot;又加又减&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;反向有功&quot;,</span><br><span class="line">            &quot;lsb&quot;: 2,</span><br><span class="line">            &quot;msb&quot;: 3,</span><br><span class="line">            &quot;00&quot;: &quot;不加不减&quot;,</span><br><span class="line">            &quot;01&quot;: &quot;加&quot;,</span><br><span class="line">            &quot;02&quot;: &quot;减&quot;,</span><br><span class="line">            &quot;03&quot;: &quot;又加又减&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>支持多字节的位解析：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;00000000&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;主动上报模式字&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;bit&quot;,</span><br><span class="line">    &quot;data&quot;: &quot;XXXXXXXXXXXXXXXX&quot;,</span><br><span class="line">    &quot;bits&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;bit-14: 分闸&quot;,</span><br><span class="line">            &quot;lsb&quot;: 14,</span><br><span class="line">            &quot;msb&quot;: 14,</span><br><span class="line">            &quot;00&quot;: &quot;&quot;,</span><br><span class="line">            &quot;01&quot;: &quot;✔&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;bit-15: 合闸&quot;,</span><br><span class="line">            &quot;lsb&quot;: 15,</span><br><span class="line">            &quot;msb&quot;: 15,</span><br><span class="line">            &quot;00&quot;: &quot;&quot;,</span><br><span class="line">            &quot;01&quot;: &quot;✔&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;bit-16: 失压&quot;,</span><br><span class="line">            &quot;lsb&quot;: 16,</span><br><span class="line">            &quot;msb&quot;: 16,</span><br><span class="line">            &quot;00&quot;: &quot;&quot;,</span><br><span class="line">            &quot;01&quot;: &quot;✔&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;bit-17: 欠压&quot;,</span><br><span class="line">            &quot;lsb&quot;: 17,</span><br><span class="line">            &quot;msb&quot;: 17,</span><br><span class="line">            &quot;00&quot;: &quot;&quot;,</span><br><span class="line">            &quot;01&quot;: &quot;✔&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;bit-18: 过压&quot;,</span><br><span class="line">            &quot;lsb&quot;: 18,</span><br><span class="line">            &quot;msb&quot;: 18,</span><br><span class="line">            &quot;00&quot;: &quot;&quot;,</span><br><span class="line">            &quot;01&quot;: &quot;✔&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>目前「fillin」「fillat」「endian」暂不支持。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;00000000&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;资产编码（ASCII）&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">    &quot;len&quot;: 32,</span><br><span class="line">    &quot;fillin&quot;: 0,</span><br><span class="line">    &quot;fillat&quot;: &quot;front&quot;,</span><br><span class="line">    &quot;endian&quot;: &quot;LE&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><p>block 类型中可以放置上述任意类型，支持在 block 中嵌套 block 类型。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;00000000&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;电压整定参数块&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;block&quot;,</span><br><span class="line">    &quot;data&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;过压整定值&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;bcd&quot;,</span><br><span class="line">            &quot;data&quot;: &quot;XXX.X&quot;,</span><br><span class="line">            &quot;unit&quot;: &quot;V&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;欠压整定值&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;bcd&quot;,</span><br><span class="line">            &quot;data&quot;: &quot;XXX.X&quot;,</span><br><span class="line">            &quot;unit&quot;: &quot;V&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;断相整定值&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;bcd&quot;,</span><br><span class="line">            &quot;data&quot;: &quot;XXX.X&quot;,</span><br><span class="line">            &quot;unit&quot;: &quot;V&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;00000000&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;瞬时冻结（数据块）&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;block&quot;,</span><br><span class="line">    &quot;data&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;冻结时间&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;time&quot;,</span><br><span class="line">            &quot;data&quot;: &quot;YYMMDDhhmm&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;正向有功电能（总）&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;bcd&quot;,</span><br><span class="line">            &quot;data&quot;: [</span><br><span class="line">                &quot;XXXXXX.XX&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;unit&quot;: &quot;kWh&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;反向有功电能（总）&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;bcd&quot;,</span><br><span class="line">            &quot;data&quot;: [</span><br><span class="line">                &quot;XXXXXX.XX&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;unit&quot;: &quot;kWh&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;组合无功电能（c1）&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;bcd&quot;,</span><br><span class="line">            &quot;data&quot;: [</span><br><span class="line">                &quot;XXXXXX.XX&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;unit&quot;: &quot;kvarh&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;组合无功电能（c2）&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;bcd&quot;,</span><br><span class="line">            &quot;data&quot;: [</span><br><span class="line">                &quot;XXXXXX.XX&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;unit&quot;: &quot;kvarh&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;&lt;a href=&quot;https://code.visualstudio.com/Download&quot;&gt;「这是一个内置 DLT645 规则解析引擎的协议测试工具」&lt;/a&gt;&lt;/center&gt;

&lt;br&gt;

&lt;p&gt;&lt;img src=&quot;/sulfurandcu.io/cly6m4gfj002qscrq77a5a7cn/toolkit.dlt645.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>开发环境配置指南</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/clrznawwf0001a4rq8nfh1qw2.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/clrznawwf0001a4rq8nfh1qw2.html</id>
    <published>2024-01-30T00:52:09.000Z</published>
    <updated>2024-01-30T00:52:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>vscode + scons + arm-none-eabi-gcc + cortex-debug + jlink</p><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><h3 id="1-1-安装-vscode-软件"><a href="#1-1-安装-vscode-软件" class="headerlink" title="1.1 安装 vscode 软件"></a>1.1 安装 vscode 软件</h3><p><img src="/sulfurandcu.io/clrznawwf0001a4rq8nfh1qw2/download.vscode.png"></p><center><a href="https://code.visualstudio.com/download">https://code.visualstudio.com/download</a></center><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">install vscode extentions: C/C++ &amp; C/C++ Extension Pack</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">install vscode extentions: Cortex-Debug</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">install vscode extentions: RTOS-Views, Memory-View, Peripheral-Viewer</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="1-2-安装-python-环境"><a href="#1-2-安装-python-环境" class="headerlink" title="1.2 安装 python 环境"></a>1.2 安装 python 环境</h3><p><img src="/sulfurandcu.io/clrznawwf0001a4rq8nfh1qw2/download.python.png"></p><center><a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></center><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">install python scripts: cmd &gt; pip install scons==3.1.2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">install python scripts: cmd &gt; pip install pywin32</span><br></pre></td></tr></table></figure><figure class="highlight py"><figcaption><span>使用文本编辑器打开 scons 文件（该文件在你 python 安装路径下的 Scripts 目录中）</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.dont_write_bytecode = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 在 `import sys` 的下一行添加 `sys.dont_write_bytecode = True` 语句（避免生成 __pycache__ 目录）</span></span><br></pre></td></tr></table></figure><h2 id="2-编译"><a href="#2-编译" class="headerlink" title="2. 编译"></a>2. 编译</h2><h3 id="2-1-安装-arm-none-eabi-交叉编译工具链"><a href="#2-1-安装-arm-none-eabi-交叉编译工具链" class="headerlink" title="2.1 安装 arm-none-eabi 交叉编译工具链"></a>2.1 安装 arm-none-eabi 交叉编译工具链</h3><p><img src="/sulfurandcu.io/clrznawwf0001a4rq8nfh1qw2/download.armtoolchain.png"></p><center><a href="https://developer.arm.com/downloads/-/gnu-rm">gcc-arm-none-eabi-10.3-2021.10-win32.zip</a></center><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将压缩文件解压至任意位置</span><br></pre></td></tr></table></figure><h3 id="2-2-新建-build-任务"><a href="#2-2-新建-build-任务" class="headerlink" title="2.2 新建 build 任务"></a>2.2 新建 build 任务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">若任务存在则该步骤可跳过</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>task.json</span><a href="https://code.visualstudio.com/docs/editor/tasks">link</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;scons -j16&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;scons -c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-测试-build-任务"><a href="#2-3-测试-build-任务" class="headerlink" title="2.3 测试 build 任务"></a>2.3 测试 build 任务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 vscode 打开测试工程</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">点击 Terminal-&gt;RunTask-&gt;build（首次执行时会报错并自动生成 rtconfig.ini 文件）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开 rtconfig.ini 填入 arm-none-eabi 安装路径（i.e. d:\arm-none-eabi-10.3-2021.10\bin）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">点击 Terminal-&gt;RunTask-&gt;clean</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">点击 Terminal-&gt;RunTask-&gt;build</span><br></pre></td></tr></table></figure><h2 id="3-烧录"><a href="#3-烧录" class="headerlink" title="3. 烧录"></a>3. 烧录</h2><h3 id="3-1-安装-JLink-工具"><a href="#3-1-安装-JLink-工具" class="headerlink" title="3.1 安装 JLink 工具"></a>3.1 安装 JLink 工具</h3><p><img src="/sulfurandcu.io/clrznawwf0001a4rq8nfh1qw2/download.jlink.png"></p><center><a href="https://www.segger.com/downloads/jlink/">JLink 7.22b</a></center><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装 JLink 后要记得修改 JLinkDevices.xml 并拷贝相应的 device 文件</span><br></pre></td></tr></table></figure><h3 id="3-2-编写-write-脚本"><a href="#3-2-编写-write-脚本" class="headerlink" title="3.2 编写 write 脚本"></a>3.2 编写 write 脚本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">若脚本存在则该步骤可跳过</span><br></pre></td></tr></table></figure><figure class="highlight bat"><figcaption><span>download.bat (build/gcc/bin/download.bat)</span></figcaption><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> config=download.ini</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exist</span> <span class="variable">%config%</span> (</span><br><span class="line">    <span class="built_in">echo</span> error: <span class="variable">%config%</span> does <span class="keyword">not</span> <span class="keyword">exist</span>. but it should have been generated automatically, you need to fill <span class="keyword">in</span> some informations. ^(greetings from liujitong^)</span><br><span class="line">    <span class="built_in">echo</span> <span class="built_in">replace</span> this line with your jlink.exe <span class="built_in">path</span>. ^(i.e. D:\JLink\JLink.exe^) ^(<span class="keyword">do</span> <span class="keyword">not</span> commit this file to svn^) &gt; <span class="variable">%config%</span></span><br><span class="line">    <span class="keyword">goto</span> end</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /f &quot;delims=&quot; <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="variable">%config%</span>) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> <span class="built_in">path</span>=&quot;<span class="variable">%%i</span>&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="variable">%path%</span> -Device %<span class="number">1</span> -<span class="keyword">If</span> SWD -Speed <span class="number">12000</span> -AutoConnect <span class="number">1</span> -NoGui <span class="number">1</span> -CommandFile %~dp0\download.txt</span><br><span class="line"></span><br><span class="line">:end</span><br></pre></td></tr></table></figure><figure class="highlight txt"><figcaption><span>download.txt (build/gcc/bin/download.txt)</span></figcaption><table><tr><td class="code"><pre><span class="line">r</span><br><span class="line">h</span><br><span class="line">erase 0x00000000 0x00080000</span><br><span class="line">loadfile .\rtthread.bin 0x00000000</span><br><span class="line">r</span><br><span class="line">g</span><br><span class="line">q</span><br></pre></td></tr></table></figure><h3 id="3-3-新建-write-任务"><a href="#3-3-新建-write-任务" class="headerlink" title="3.3 新建 write 任务"></a>3.3 新建 write 任务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">若任务存在则该步骤可跳过</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>task.json</span><a href="https://code.visualstudio.com/docs/editor/tasks">link</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;write&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd ./build/gcc/bin/; ./download.bat STM32F103&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;batch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;scons -j16; cd ./build/gcc/bin/; ./download.bat STM32F103&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-测试-write-任务"><a href="#3-4-测试-write-任务" class="headerlink" title="3.4 测试 write 任务"></a>3.4 测试 write 任务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 vscode 打开测试工程</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">点击 Terminal-&gt;RunTask-&gt;build</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">点击 Terminal-&gt;RunTask-&gt;write（首次执行时会报错并自动生成 build/gcc/bin/download.ini 文件）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开 download.ini 填入 JLink.exe 所在路径（i.e. d:\JLink_V722b\JLink.exe）（注意 JLink.exe 不能省略）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">点击 Terminal-&gt;RunTask-&gt;write</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">点击 Terminal-&gt;RunTask-&gt;batch (batch == build + write)</span><br></pre></td></tr></table></figure><h2 id="4-调试"><a href="#4-调试" class="headerlink" title="4. 调试"></a>4. 调试</h2><h3 id="4-1-安装-vscode-插件"><a href="#4-1-安装-vscode-插件" class="headerlink" title="4.1 安装 vscode 插件"></a>4.1 安装 vscode 插件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cortex-Debug</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RTOS-Views</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Memory-View</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Peripheral-Viewer</span><br></pre></td></tr></table></figure><h3 id="4-2-配置-vscode-插件"><a href="#4-2-配置-vscode-插件" class="headerlink" title="4.2 配置 vscode 插件"></a>4.2 配置 vscode 插件</h3><figure class="highlight json"><figcaption><span>Cortex-Debug</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;cortex-debug.ArmToolchainPath&quot;</span>  <span class="punctuation">:</span> <span class="string">&quot;i.e. d:\\arm-none-eabi-10.3-2021.10\\bin&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;cortex-debug.JLinkGDBServerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;i.e. d:\\JLink_V722b\\JLinkGDBServerCL.exe&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h3 id="4-3-新建-launch-配置"><a href="#4-3-新建-launch-配置" class="headerlink" title="4.3 新建 launch 配置"></a>4.3 新建 launch 配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">若配置存在则该步骤可跳过</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>launch.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug@JLinkGDBServerCL.exe/stm32f103&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cortex-debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;servertype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jlink&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;serverArgs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;interface&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swd&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;attach&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;executable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./build/gcc/bin/rtthread.elf&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">&quot;device&quot;</span><span class="punctuation">:</span> <span class="string">&quot;STM32F103&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;svdFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./underlayer/cpu/st/arm/stm32f1xx_libraries/device/stm32f103.svd&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;liveWatch&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;samplesPerSecond&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-测试-launch-配置"><a href="#4-3-测试-launch-配置" class="headerlink" title="4.3 测试 launch 配置"></a>4.3 测试 launch 配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 vscode 打开测试工程</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">点击 RunAndDebug 图标（左侧边栏）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择 launch 配置</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">点击 StartDebugging 按钮启动调试</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">左侧 VARIABLES 窗口查看本地变量数据</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">左侧 WATCH 窗口查看变量数据</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">左侧 XPERIPHERALS 窗口查看寄存器数据</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开 MEMORY 窗口查看内存数据</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开 DEBUG CONSOLE 窗口键入 x/nfu addr 查看内存数据</span><br><span class="line">https://sourceware.org/gdb/current/onlinedocs/gdb.html/Memory.html</span><br></pre></td></tr></table></figure><h2 id="5-跳转"><a href="#5-跳转" class="headerlink" title="5. 跳转"></a>5. 跳转</h2><h3 id="5-1-安装-mingw-环境"><a href="#5-1-安装-mingw-环境" class="headerlink" title="5.1 安装 mingw 环境"></a>5.1 安装 mingw 环境</h3><p><img src="/sulfurandcu.io/clrznawwf0001a4rq8nfh1qw2/download.mingw.png"></p><center><a href="https://www.mingw-w64.org/downloads/">MingW-W64: x86_64-x.x.x-release-win32-seh-ucrt-xxx.7z</a></center><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将压缩文件解压至任意位置</span><br></pre></td></tr></table></figure><h3 id="5-2-配置-C-x2F-C-插件"><a href="#5-2-配置-C-x2F-C-插件" class="headerlink" title="5.2 配置 C&#x2F;C++ 插件"></a>5.2 配置 C&#x2F;C++ 插件</h3><figure class="highlight json"><figcaption><span>C/C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;C_Cpp.default.compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;i.e. d:\\mingw-w64-builds\\x86_64-win32-seh-ucrt\\mingw64\\bin\\gcc.exe&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h3 id="5-3-配置-c-cpp-properties-json-文件"><a href="#5-3-配置-c-cpp-properties-json-文件" class="headerlink" title="5.3 配置 c_cpp_properties.json 文件"></a>5.3 配置 c_cpp_properties.json 文件</h3><figure class="highlight json"><figcaption><span>c_cpp_properties.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/application&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/board&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/packages&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/rt-thread&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/underlayer&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;__CC_ARM&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c99&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gnu++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;windows-gcc-x64&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-测试-c-cpp-properties-json-文件"><a href="#5-4-测试-c-cpp-properties-json-文件" class="headerlink" title="5.4 测试 c_cpp_properties.json 文件"></a>5.4 测试 c_cpp_properties.json 文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">重启 vscode 打开测试工程后不弹出警告即可</span><br></pre></td></tr></table></figure><h2 id="6-交互（shell）"><a href="#6-交互（shell）" class="headerlink" title="6. 交互（shell）"></a>6. 交互（shell）</h2><h3 id="6-1-安装-shell-工具"><a href="#6-1-安装-shell-工具" class="headerlink" title="6.1 安装 shell 工具"></a>6.1 安装 shell 工具</h3><ul><li><a href="https://github.com/kingToolbox/WindTerm/releases/download/2.6.0/WindTerm_2.6.0_Windows_Portable_x86_32.zip">WindTerm_2.6.0_Windows_Portable_x86_32.zip</a></li><li><a href="https://github.com/kingToolbox/WindTerm/releases/download/2.6.0/WindTerm_2.6.0_Windows_Portable_x86_64.zip">WindTerm_2.6.0_Windows_Portable_x86_64.zip</a></li></ul><h3 id="6-2-新建-shell-会话"><a href="#6-2-新建-shell-会话" class="headerlink" title="6.2 新建 shell 会话"></a>6.2 新建 shell 会话</h3><figure class="highlight txt"><figcaption><span>serial</span></figcaption><table><tr><td class="code"><pre><span class="line">- 会话</span><br><span class="line">  - 串口：COM3</span><br><span class="line">  - 数据：text</span><br><span class="line">- 串口</span><br><span class="line">  - 协议</span><br><span class="line">    - 波特率：115200</span><br><span class="line">    - 数据位：8</span><br><span class="line">    - 校验位：N</span><br><span class="line">    - 停止位：1</span><br><span class="line">    - 流控制：N</span><br></pre></td></tr></table></figure><h3 id="6-3-测试-shell-交互"><a href="#6-3-测试-shell-交互" class="headerlink" title="6.3 测试 shell 交互"></a>6.3 测试 shell 交互</h3><figure class="highlight txt"><figcaption><span>serial COM3</span></figcaption><table><tr><td class="code"><pre><span class="line">msh &gt;</span><br><span class="line">msh &gt;</span><br><span class="line">msh &gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;vscode + scons + arm-none-eabi-gcc + cortex-debug + jlink&lt;/p&gt;
&lt;h2 id=&quot;1-准备&quot;&gt;&lt;a href=&quot;#1-准备&quot; class=&quot;headerlink&quot; title=&quot;1. 准备&quot;&gt;&lt;/a&gt;1. 准备&lt;/h2&gt;&lt;h3 id=&quot;1-1-安装-vscode-软件&quot;&gt;&lt;a href=&quot;#1-1-安装-vscode-软件&quot; class=&quot;headerlink&quot; title=&quot;1.1 安装 vscode 软件&quot;&gt;&lt;/a&gt;1.1 安装 vscode 软件&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/sulfurandcu.io/clrznawwf0001a4rq8nfh1qw2/download.vscode.png&quot;&gt;&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;https://code.visualstudio.com/download&quot;&gt;https://code.visualstudio.com/download&lt;/a&gt;&lt;/center&gt;&lt;br&gt;

&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;install vscode extentions: C/C++ &amp;amp; C/C++ Extension Pack&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;install vscode extentions: Cortex-Debug&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;install vscode extentions: RTOS-Views, Memory-View, Peripheral-Viewer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>freertos or rtthread ?</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/cm03lc8n5007fdgrqhk1m06ee.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/cm03lc8n5007fdgrqhk1m06ee.html</id>
    <published>2023-11-30T06:53:09.000Z</published>
    <updated>2023-11-30T06:53:09.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">对比条目</th><th align="center">FreeRTOS</th><th align="center">RT-Thread</th></tr></thead><tbody><tr><td align="center">许可协议</td><td align="center">MIT</td><td align="center">Apache License 2.0</td></tr><tr><td align="center">内核开销</td><td align="center">ROM: 5KB<br>RAM: 2KB</td><td align="center">ROM: 3KB<br>RAM: 1KB</td></tr><tr><td align="center">实测开销</td><td align="center"></td><td align="center">ROM: 11KB<br>RAM: 1KB</td></tr><tr><td align="center">抢占调度</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">轮转调度</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">多任务</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">优先级</td><td align="center">32</td><td align="center">8&#x2F;32&#x2F;256</td></tr><tr><td align="center">信号量</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">互斥量</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">事件集</td><td align="center">×</td><td align="center">支持</td></tr><tr><td align="center">邮箱</td><td align="center">×</td><td align="center">支持</td></tr><tr><td align="center">信号</td><td align="center">×</td><td align="center">支持</td></tr><tr><td align="center">消息队列</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">内存管理</td><td align="center">heap1 - heap5</td><td align="center">内存堆管理 | 内存池管理</td></tr><tr><td align="center"><br></td><td align="center"><br></td><td align="center"><br></td></tr><tr><td align="center">系统兼容</td><td align="center">×</td><td align="center">提供 FreeRTOS_Wrapper 兼容层</td></tr><tr><td align="center">posix</td><td align="center">×</td><td align="center">支持</td></tr><tr><td align="center">shell</td><td align="center">×</td><td align="center">MSH, FINSH</td></tr><tr><td align="center">网络系统</td><td align="center">×</td><td align="center">SAL + AT &#x2F; LwIP</td></tr><tr><td align="center">文件系统</td><td align="center">FATFS</td><td align="center">DFS + FATFS &#x2F; RomFS &#x2F; Yaffs2 &#x2F; Uffs2 &#x2F; DevFS</td></tr><tr><td align="center">spiflash</td><td align="center">×</td><td align="center">FlashDB + FAL + SFUD</td></tr><tr><td align="center">设备框架</td><td align="center">×</td><td align="center">支持</td></tr><tr><td align="center">电源管理</td><td align="center">×</td><td align="center">支持</td></tr><tr><td align="center">图形界面</td><td align="center">×</td><td align="center">支持</td></tr></tbody></table><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Object Name</span><br><span class="line"></span><br><span class="line"> 656         58          0         28       1024       8091   heap_4.o</span><br><span class="line"> 124          0          0          0          0       6561   list.o</span><br><span class="line"> 894         78          0         12          0      11256   port.o</span><br><span class="line">2212        270          0         64        240      31123   tasks.o</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Object Name</span><br><span class="line"></span><br><span class="line"> 168         16          0          8          0       2064   clock.o</span><br><span class="line"> 186         30         16          0          0       5388   components.o</span><br><span class="line"> 252         28          0          0          0        780   context_rvds.o</span><br><span class="line"> 640        342          0         16          0       3954   cpuport.o</span><br><span class="line">  24          0          0          0          0        609   cstdlib.o</span><br><span class="line"> 270          0          0          0          0       2774   device.o</span><br><span class="line"> 300         34          0          8        416       6238   idle.o</span><br><span class="line">1680         24          0          0          0      16384   ipc.o</span><br><span class="line"> 132         26          0          9          0       2282   irq.o</span><br><span class="line">2316        240        154        140        172      14344   kservice.o</span><br><span class="line"> 676         68          0          0          0       4430   mem.o</span><br><span class="line"> 486         26          0        196          0      10134   object.o</span><br><span class="line">  56         12          0          0         68       1341   pin.o</span><br><span class="line"> 976        178          0         24        256       9528   scheduler_up.o</span><br><span class="line">  12          0          0          0          0        540   syscalls.o</span><br><span class="line">1170         28          0         12          0      14517   thread.o</span><br><span class="line"> 948         44          0         20          0       9237   timer.o</span><br><span class="line"> 346         28          4          4          0       6717   workqueue.o</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;对比条目&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;FreeRTOS&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;RT-Thread&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;许可协议&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;MIT&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Apache License 2.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;内核开销&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;ROM: 5KB&lt;br&gt;RAM: 2KB&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;ROM: 3KB&lt;br&gt;RAM: 1KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;实测开销&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;ROM: 11KB&lt;br&gt;RAM: 1KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;抢占调度&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;轮转调度&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;多任务&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;优先级&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;32&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&amp;#x2F;32&amp;#x2F;256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;信号量&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;互斥量&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;事件集&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;×&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;邮箱&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;×&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;信号&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;×&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;消息队列&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;内存管理&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;heap1 - heap5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;内存堆管理 | 内存池管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;br&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;br&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;br&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;系统兼容&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;×&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;提供 FreeRTOS_Wrapper 兼容层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;posix&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;×&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;shell&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;×&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;MSH, FINSH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;网络系统&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;×&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;SAL + AT &amp;#x2F; LwIP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;文件系统&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;FATFS&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;DFS + FATFS &amp;#x2F; RomFS &amp;#x2F; Yaffs2 &amp;#x2F; Uffs2 &amp;#x2F; DevFS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;spiflash&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;×&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;FlashDB + FAL + SFUD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;设备框架&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;×&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;电源管理&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;×&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;图形界面&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;×&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>中断向量表偏移寄存器配置方式</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/clpga8j0y00i3dcrq5x5t1gkd.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/clpga8j0y00i3dcrq5x5t1gkd.html</id>
    <published>2023-11-27T02:19:53.000Z</published>
    <updated>2023-11-27T02:19:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于「引导程序＋应用程序」之类的方案，我们通常是在系统初始化函数（SystemInit()）中配置中断向量表偏移寄存器来实现中断向量表的重定向。但是这种直接修改官方库的方式往往会给后期的版本管理带来诸多不便。基于此，本文给出一个替代方案，供诸位参考。</p><figure class="highlight c"><figcaption><span>vtor.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;xxx32xxxx.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VECTOR_TABLE_OFFSET             ((uint32_t)0x00018000) <span class="comment">/* % 0x200 == 0 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROM_BASE                        ((uint32_t)0x08000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RAM_BASE                        ((uint32_t)0x20000000)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemVTOR</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> EXECUTE_IN_RAM</span></span><br><span class="line">    SCB-&gt;VTOR = RAM_BASE | VECTOR_TABLE_OFFSET;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    SCB-&gt;VTOR = ROM_BASE | VECTOR_TABLE_OFFSET;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>startup_xxx32xxxx.s</span></figcaption><table><tr><td class="code"><pre><span class="line">Reset_Handler   PROC</span><br><span class="line">                EXPORT  Reset_Handler   [WEAK]</span><br><span class="line">                IMPORT  SystemVTOR</span><br><span class="line">                IMPORT  SystemInit</span><br><span class="line">                IMPORT  __main</span><br><span class="line"></span><br><span class="line">                LDR     R0, =SystemVTOR</span><br><span class="line">                BLX     R0</span><br><span class="line">                LDR     R0, =SystemInit</span><br><span class="line">                BLX     R0</span><br><span class="line">                LDR     R0, =__main</span><br><span class="line">                BX      R0</span><br><span class="line">                ENDP</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="开发笔记" scheme="https://sulfurandcu.github.io/sulfurandcu.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>开发指南：华大 HC32F460 &amp; HC32F4A0 比较</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/cm04je64700adckrq3udz79n5.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/cm04je64700adckrq3udz79n5.html</id>
    <published>2023-11-21T02:35:29.000Z</published>
    <updated>2023-11-21T02:35:29.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">对比条目</th><th align="center">HC32F460</th><th align="center">HC32F4A0</th></tr></thead><tbody><tr><td align="center">工作频率</td><td align="center">200MHz</td><td align="center">240MHz</td></tr><tr><td align="center">内核架构</td><td align="center">Cortex-M4 + FPU + DSP + MPU</td><td align="center">Cortex-M4 + FPU + DSP + MPU</td></tr><tr><td align="center">芯片封装</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">ROM</td><td align="center">512KB | 256KB</td><td align="center">1024KB | 2048KB</td></tr><tr><td align="center">RAM</td><td align="center">192KB</td><td align="center">516KB</td></tr><tr><td align="center">PGA</td><td align="center">×1</td><td align="center">×4</td></tr><tr><td align="center">CMP</td><td align="center">×3</td><td align="center">×4</td></tr><tr><td align="center">ADC</td><td align="center">×2</td><td align="center">×3</td></tr><tr><td align="center">DAC</td><td align="center">×2</td><td align="center">×4</td></tr><tr><td align="center">TMR</td><td align="center">Timer6 ×3 (16bit 高级 PWM Timer)<br>Timer4 ×3 (16bit 电机 PWM Timer)<br>TimerA ×6 (16bit 通用 PWM Timer)<br><br>Timer0 ×2 (16bit 通用 ___ Timer)</td><td align="center">Timer6  ×8 (16bit 高级 PWM Timer)<br>Timer4  ×3 (16bit 电机 PWM Timer)<br>TimerA ×C (16bit 通用 PWM Timer)<br>Timer2  ×4 (16bit 通用 ___ Timer)<br>Timer0  ×2 (16bit 通用 ___ Timer)</td></tr><tr><td align="center">RTC</td><td align="center">×1</td><td align="center">×1</td></tr><tr><td align="center">WDT</td><td align="center">WDT &amp; SWDT</td><td align="center">WDT &amp; SWDT</td></tr><tr><td align="center">URT</td><td align="center">×4</td><td align="center">×10</td></tr><tr><td align="center">SPI</td><td align="center">×4</td><td align="center">×6</td></tr><tr><td align="center">QSPI</td><td align="center">×1</td><td align="center">×1</td></tr><tr><td align="center">I2C</td><td align="center">×3</td><td align="center">×6</td></tr><tr><td align="center">I2S</td><td align="center">×4</td><td align="center">×4</td></tr><tr><td align="center">CAN</td><td align="center">×1</td><td align="center">×2</td></tr><tr><td align="center">USB</td><td align="center">×1</td><td align="center">×1</td></tr><tr><td align="center">ETH</td><td align="center">-</td><td align="center">×1</td></tr><tr><td align="center">SDIO</td><td align="center">×2</td><td align="center">×2</td></tr></tbody></table>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="开发笔记" scheme="https://sulfurandcu.github.io/sulfurandcu.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="华大半导体" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%8D%8E%E5%A4%A7%E5%8D%8A%E5%AF%BC%E4%BD%93/"/>
    
    <category term="HC32F460" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/HC32F460/"/>
    
    <category term="HC32F4A0" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/HC32F4A0/"/>
    
  </entry>
  
  <entry>
    <title>问题记录：华大 HC32F460 内存边界禁止非对齐访问</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/cloqi184y000s8wrqg4ga0ei1.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/cloqi184y000s8wrqg4ga0ei1.html</id>
    <published>2023-11-09T01:14:29.000Z</published>
    <updated>2023-11-09T01:14:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章更新（2023-11-14）"><a href="#文章更新（2023-11-14）" class="headerlink" title="文章更新（2023-11-14）"></a>文章更新（2023-11-14）</h2><p>经过排查，本文所述异常现象并非由「非对齐访问」所致，而是因为 SRAM3 开启 ECC 校验时仅支持以字为单位进行访问。</p><h2 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h2><ul><li>程序无法正常启动</li><li>有时会进入 hard fault 中断</li><li>有时候会出现以下异常：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Call Stack + Locals                                                                    ✘</span><br><span class="line">    Name                                Location/Value                          Type</span><br><span class="line">    __scatterload_zeroinit              0x00074C56                              function</span><br><span class="line">    __scatterload                       0x00018DFE                              function</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h2><h3 id="芯片资源"><a href="#芯片资源" class="headerlink" title="芯片资源"></a>芯片资源</h3><ul><li>RAM 192KB&#x2F;0x30000</li><li>ROM 512KB&#x2F;0x80000（其中通过分散加载给应用程序分配的空间为 416KB&#x2F;0x68000）</li></ul><h3 id="链接数据"><a href="#链接数据" class="headerlink" title="链接数据"></a>链接数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==============================================================================</span><br><span class="line"></span><br><span class="line">    Total RO  Size (Code + RO Data)               419844 ( 410.00kB)</span><br><span class="line">    Total RW  Size (RW Data + ZI Data)            163952 ( 160.11kB)</span><br><span class="line">    Total ROM Size (Code + RO Data + RW Data)     421056 ( 411.19kB)</span><br><span class="line"></span><br><span class="line">==============================================================================</span><br></pre></td></tr></table></figure><h3 id="分散加载"><a href="#分散加载" class="headerlink" title="分散加载"></a>分散加载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LR_IROM1 0x00018000 0x00068000 &#123;</span><br><span class="line"></span><br><span class="line">; 中断向量</span><br><span class="line">ER_IROM1 0x00018000 0x00068000 &#123;</span><br><span class="line">*.o (RESET, +First)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; 程序信息</span><br><span class="line">ER_IROM2 + 0 &#123;</span><br><span class="line">*.o (SECTION_INFO_APP, +First)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; 程序代码</span><br><span class="line">ER_IROM3 + 0 &#123;</span><br><span class="line">*(InRoot$$Sections)</span><br><span class="line">.ANY (+RO)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; 内存空间</span><br><span class="line">RW_IRAM1 0x1FFF8000 0x00030000 &#123;</span><br><span class="line">.ANY (+RW +ZI)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>由于代码量比较临界，起初我以为是 flash 的问题。但是 map 文件中显示 ROM 只占用了 411.19kB 的空间，并没有超过 416KB 的总量。那 RAM 呢？RAM 只用了 160.11KB 也没有超过 192KB 的总量，邪了门儿了真是！哎，等等！这款芯片的 RAM 我记得好像是分成了两块，怎么说的来着，瞅一眼《参考手册》：</p><p><img src="/sulfurandcu.io/cloqi184y000s8wrqg4ga0ei1/HC32F460-manual.png"></p><p>果然，两块 RAM 间不支持非对齐访问，再一看 SRAMH 的大小：32KB！<del>破案了！现在 RAM 的用量不正好到达 160KB（192KB - 32KB &#x3D; 160KB）这个临界点了么！</del></p><blockquote><p>超过 160KB 确实会出现异常，但不是因达到 SRAMH 所致（SRAMH 地址最小，始终会用到）而是因达到 SRAM3 且使能 ECC 校验所致。注意看红线上面的那句话：「在允许 RAM ECC 校验错误产生 NMI 中断和复位的情况下，必须对所用 RAM 空间以字（16bit）为单位进行访问」。</p></blockquote><p>按照现有分散加载文件的写法，两块内存会被认为是一个整体，那么就必然存在「在内存边界处进行非对齐访问」的可能。</p><h2 id="规避方法"><a href="#规避方法" class="headerlink" title="规避方法"></a>规避方法</h2><p>非对齐访问的风险可以在分散加载文件中将两块内存断开：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LR_IROM1 0x00018000 0x00068000 &#123;</span><br><span class="line"></span><br><span class="line">; 中断向量</span><br><span class="line">ER_IROM1 0x00018000 0x00068000 &#123;</span><br><span class="line">*.o (RESET, +First)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; 程序信息</span><br><span class="line">ER_IROM2 + 0 &#123;</span><br><span class="line">*.o (SECTION_INFO_APP, +First)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; 程序代码</span><br><span class="line">ER_IROM3 + 0 &#123;</span><br><span class="line">*(InRoot$$Sections)</span><br><span class="line">.ANY (+RO)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; 内存空间</span><br><span class="line">RW_IRAM1 0x1FFF8000 0x00007FF0 &#123; ; 空出若干字节不用，以避免非对齐访问。</span><br><span class="line">.ANY (+RW +ZI)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; 内存空间</span><br><span class="line">RW_IRAM2 0x20000000 0x00028000 &#123;</span><br><span class="line">.ANY (+RW +ZI)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SRAM3 开启 ECC 后仅支持以字为单位进行访问的问题可以通过禁用 ECC 功能来解决。当然如果你一定要用 ECC 的话，那这块空间肯定不能用来让编译器自动分配内存，而是要自己来手动管理。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;文章更新（2023-11-14）&quot;&gt;&lt;a href=&quot;#文章更新（2023-11-14）&quot; class=&quot;headerlink&quot; title=&quot;文章更新（2023-11-14）&quot;&gt;&lt;/a&gt;文章更新（2023-11-14）&lt;/h2&gt;&lt;p&gt;经过排查，本文所述异常现象并非由「非对齐访问」所致，而是因为 SRAM3 开启 ECC 校验时仅支持以字为单位进行访问。&lt;/p&gt;
&lt;h2 id=&quot;现象描述&quot;&gt;&lt;a href=&quot;#现象描述&quot; class=&quot;headerlink&quot; title=&quot;现象描述&quot;&gt;&lt;/a&gt;现象描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;程序无法正常启动&lt;/li&gt;
&lt;li&gt;有时会进入 hard fault 中断&lt;/li&gt;
&lt;li&gt;有时候会出现以下异常：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Call Stack + Locals                                                                    ✘&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Name                                Location/Value                          Type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __scatterload_zeroinit              0x00074C56                              function&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __scatterload                       0x00018DFE                              function&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="问题记录" scheme="https://sulfurandcu.github.io/sulfurandcu.io/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="华大半导体" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%8D%8E%E5%A4%A7%E5%8D%8A%E5%AF%BC%E4%BD%93/"/>
    
    <category term="HC32F460" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/HC32F460/"/>
    
  </entry>
  
  <entry>
    <title>我的一套生产工具</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/clnyhr2mr003710rqgjtuhj11.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/clnyhr2mr003710rqgjtuhj11.html</id>
    <published>2023-10-15T02:54:20.000Z</published>
    <updated>2023-10-15T02:54:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>分享一些提高工作效率的工具</p><span id="more"></span><h2 id="机械键盘"><a href="#机械键盘" class="headerlink" title="机械键盘"></a>机械键盘</h2><ul><li>使用 tmk, qmk 等工具烧录自定义固件</li></ul><h2 id="键位布局"><a href="#键位布局" class="headerlink" title="键位布局"></a>键位布局</h2><ul><li><a href="/sulfurandcu.io/clnor6mvz0015ocrq2jks39ew.html">dƷvorak</a></li></ul><h2 id="输入法儿"><a href="#输入法儿" class="headerlink" title="输入法儿"></a>输入法儿</h2><ul><li>昨夏双拼</li><li>小鹤双拼</li><li>朙月拼音</li><li>宫保拼音</li></ul><h2 id="输入引擎"><a href="#输入引擎" class="headerlink" title="输入引擎"></a>输入引擎</h2><ul><li>中州韵输入法引擎（rime, weasel, squirrel）</li></ul><h2 id="显示字体"><a href="#显示字体" class="headerlink" title="显示字体"></a>显示字体</h2><ul><li>思源宋体</li><li>思源黑体</li><li>更纱黑体</li><li>等宽字体（iosevka）</li><li>可变字体（Amstelvar）</li></ul><h2 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h2><ul><li>powertoys</li></ul><h2 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h2><ul><li>clash.for.windows (<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">https://github.com/Fndroid/clash_for_windows_pkg/releases</a>)</li><li>xtls.space (<a href="https://xtlspace.20181024.xyz/#/register?code=bUox1yaB">https://xtlspace.20181024.xyz/#/register?code=bUox1yaB</a>)</li><li>tor.browser (<a href="https://www.torproject.org/download/">https://www.torproject.org/download/</a>)</li><li>tor.zlibrary (<a href="http://bookszlibb74ugqojhzhg2a63w5i2atv5bqarulgczawnbmsb6s6qead.onion/">http://bookszlibb74ugqojhzhg2a63w5i2atv5bqarulgczawnbmsb6s6qead.onion/</a>)</li></ul><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><ul><li>Aria2</li><li>ndm</li><li>qbittorrent</li></ul><h2 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h2><ul><li>localsend</li></ul><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><ul><li>qdir</li><li>everything</li></ul><h2 id="文件对比"><a href="#文件对比" class="headerlink" title="文件对比"></a>文件对比</h2><ul><li>winmerge</li></ul><h2 id="远程终端"><a href="#远程终端" class="headerlink" title="远程终端"></a>远程终端</h2><ul><li>windterm</li></ul><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><ul><li>windows.terminal</li><li>windows.sandboxs</li><li>wsl</li><li>docker</li><li>cygwin (posix.api&#x2F;cygwin1.dll, bin&#x3D;windows.pe)</li></ul><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>mingw&#x2F;msys1 (shell) (posix.api&#x2F;msys-1.0.dll) (msys1~cmd.exe, mingw&#x2F;msys1~cygwin)</li><li>mingw&#x2F;msys2 (shell) (posix.api&#x2F;msys-2.0.dll) (msys2~cmd.exe, mingw&#x2F;msys2~cygwin)</li><li>scons</li><li>cmake.for.windows</li><li>ninja.for.windows</li><li>mingw.for.windows   (win32.api, bin&#x3D;windows.pe) ~ (visual studio)</li><li>mingw32 (mingw-w64) (win32.api, bin&#x3D;windows.pe) ~ (visual studio)</li><li>mingw64 (mingw-w64) (win32.api, bin&#x3D;windows.pe) ~ (visual studio)</li></ul><h2 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h2><ul><li>vscode</li><li>vs</li><li>eclipse</li><li>android.studio</li></ul><h2 id="软件开发（嵌入式）"><a href="#软件开发（嵌入式）" class="headerlink" title="软件开发（嵌入式）"></a>软件开发（嵌入式）</h2><ul><li>arm-none-eabi</li><li>jlink</li><li>openocd</li></ul><h2 id="硬件开发"><a href="#硬件开发" class="headerlink" title="硬件开发"></a>硬件开发</h2><ul><li>KiCAD</li></ul><h2 id="机械工业"><a href="#机械工业" class="headerlink" title="机械工业"></a>机械工业</h2><ul><li>AutoCAD</li><li>FreeCAD</li><li>Revit</li><li>Rhino</li><li>3dsMax</li><li>SketchUp</li><li>Render.Vray</li><li>Render.D5</li><li>Render.Enscape</li></ul><h2 id="图片文档"><a href="#图片文档" class="headerlink" title="图片文档"></a>图片文档</h2><ul><li>截屏工具<ul><li>fscapture</li><li>sharex</li></ul></li><li>图片查看<ul><li>honeyview</li></ul></li><li>图片编辑<ul><li>GIMP</li><li>inkscape</li><li>shift.n</li><li>ascii.generator</li></ul></li><li>文档查看<ul><li>PDF.24</li></ul></li><li>文档编辑<ul><li>draw.io</li><li>wave.drom.editor</li></ul></li></ul><h2 id="视频音频"><a href="#视频音频" class="headerlink" title="视频音频"></a>视频音频</h2><ul><li>录屏工具<ul><li>obs.studio</li><li>lonelyscreen (ios screen display)</li></ul></li><li>视频播放<ul><li>MPC-HC</li><li>VLC</li><li>PotPlayer</li></ul></li><li>视频剪辑<ul><li>shotcut</li><li>losslesscut</li></ul></li><li>视频转码<ul><li>handbrake</li></ul></li><li>音频播放<ul><li>foobar2000</li></ul></li><li>音频剪辑<ul><li>audacity</li><li>wavosaur</li></ul></li><li>音频转码<ul><li>略.</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;分享一些提高工作效率的工具&lt;/p&gt;</summary>
    
    
    
    <category term="效率提升" scheme="https://sulfurandcu.github.io/sulfurandcu.io/categories/%E6%95%88%E7%8E%87%E6%8F%90%E5%8D%87/"/>
    
    
    <category term="生产工具" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式 IAP 在线升级－差分还原 hpatchlite 移植</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/cloidefbf00hzv0rqa7zg722r.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/cloidefbf00hzv0rqa7zg722r.html</id>
    <published>2023-09-30T16:00:04.000Z</published>
    <updated>2023-09-30T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现了一个优秀的差分还原算法：hdiff &amp; hpatch，它通过数据流的思想把 O(n) 的空间复杂度转嫁给了硬盘，使得内存的开销极低，非常适合应用于嵌入式领域。</p><p><img src="/sulfurandcu.io/cloidefbf00hzv0rqa7zg722r/diff.tools.compare.png"></p><span id="more"></span><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="hpatchlite"><a href="#hpatchlite" class="headerlink" title="hpatchlite"></a>hpatchlite</h3><p>时间复杂度：O(oldSize+newSize)<br>空间复杂度：O(1)<br>　　还原代码开销｜ROM &#x3D; 876 字节 (compiled by armcc v5.06 update4 build 422)<br>　　还原内存开销｜RAM &#x3D; 还原缓冲大小 + 解压内存开销</p><p>注：还原缓冲大小在还原时指定，至少3个字节，还原缓冲越小还原得越慢。</p><h3 id="tinyuz"><a href="#tinyuz" class="headerlink" title="tinyuz"></a>tinyuz</h3><p>时间复杂度：O(oldSize+newSize)<br>空间复杂度：O(1)<br>　　解压代码开销｜流模式｜ROM &#x3D; 1142 字节 (compiled by armcc v5.06 update4 build 422)<br>　　解压内存开销｜流模式｜RAM &#x3D; 压缩字典大小 + 解压缓冲大小</p><p>注：压缩字典大小在压缩时指定，至少1个字节，压缩字典越小压缩率越低。<br>注：解压缓冲大小在解压时指定，至少2个字节，解压缓冲越小解压缩越慢。</p><h3 id="appendix"><a href="#appendix" class="headerlink" title="appendix"></a>appendix</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Object Name</span><br><span class="line"></span><br><span class="line"> 876          0          0          0          0      10783   hpatch_lite.o</span><br><span class="line">1142          0          0          0          0      13541   tuz_dec.o</span><br><span class="line"></span><br><span class="line"> 626         80          0         12          0      12256   hpatch_user.o</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">244           0          0          0          0       2146   bspatch.o</span><br><span class="line">586           6         64          0          0       6749   quicklz.o</span><br><span class="line"></span><br><span class="line">102           4          8          0          0       2821   bspatch_user.o</span><br><span class="line"> 52           0          0          0          0       2096   quicklz_user.o</span><br></pre></td></tr></table></figure><h2 id="移植说明"><a href="#移植说明" class="headerlink" title="移植说明"></a>移植说明</h2><p>将 hdiffpatch.hpatchlite &amp; tinyuz 移植至单片机 bare metal 裸机系统（based on hdiffpatch v4）</p><h3 id="拿来"><a href="#拿来" class="headerlink" title="拿来"></a>拿来</h3><p>将 tinyuz&#x2F;decompress 目录拷贝至目标工程中。</p><p>将 HDiffPatch&#x2F;libHDiffPatch&#x2F;HPatch 目录拷贝至目标工程中。</p><p>将 HDiffPatch&#x2F;libHDiffPatch&#x2F;HPatchLite 目录拷贝至目标工程中。</p><p>将 HPatchLite&#x2F;decompresser_demo.h 文件拷贝至目标工程中。</p><h3 id="画瓢"><a href="#画瓢" class="headerlink" title="画瓢"></a>画瓢</h3><p>依 HPatchLite&#x2F;hpatchi.c&#x2F;hpatchi() 函数画瓢：移植还原功能</p><p>依 tinyuz&#x2F;tinyuz_demo.cpp&#x2F;_tuz_decompress_stream() 函数画瓢：移植解压功能</p><p>done!</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>拿来依葫芦画瓢，说得简单，做起来着实还是费了点功夫，这几年搞嵌入式搞得有些局限了，面对句(gōu)柄这种用法竟感觉无从下手。😅</p><p>作者提供了以下两个接口函数：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hpatch_lite_open()</span><br><span class="line"></span><br><span class="line">hpatch_lite_patch()</span><br></pre></td></tr></table></figure><p>看着挺简单的吧，然而他实际上是这样的：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hpatch_lite by stream: hpatch_lite_open()+hpatch_lite_patch() compiled by Mbed Studio is 662 bytes</span></span><br><span class="line"><span class="comment">//   hdiffpatch v4.2.3, other patcher compiled by Mbed Studio:</span></span><br><span class="line"><span class="comment">//      patch_single_stream() 2356 bytes (hpatch_StreamPos_t=hpatch_uint32_t)</span></span><br><span class="line"><span class="comment">//      patch_decompress_with_cache() 2846 bytes (_IS_NEED_CACHE_OLD_BY_COVERS=0,hpatch_StreamPos_t=hpatch_uint32_t)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//diff_data must created by create_lite_diff()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">hpatchi_listener_t</span>&#123;</span></span><br><span class="line">    hpi_TInputStreamHandle  diff_data;</span><br><span class="line">    hpi_TInputStream_read   read_diff;</span><br><span class="line">    <span class="comment">//must read data_size data to out_data, from read_from_pos of stream; if read error return hpi_FALSE;</span></span><br><span class="line">    hpi_BOOL (*read_old)(<span class="keyword">struct</span> <span class="type">hpatchi_listener_t</span>* listener,<span class="type">hpi_pos_t</span> read_from_pos,hpi_byte* out_data,<span class="type">hpi_size_t</span> data_size);</span><br><span class="line">    <span class="comment">//must write data_size data to sequence stream; if write error return hpi_FALSE;</span></span><br><span class="line">    hpi_BOOL (*write_new)(<span class="keyword">struct</span> <span class="type">hpatchi_listener_t</span>* listener,<span class="type">const</span> hpi_byte* data,<span class="type">hpi_size_t</span> data_size);</span><br><span class="line">&#125; <span class="type">hpatchi_listener_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hpatch_lite open</span></span><br><span class="line"><span class="comment">// read lite headinfo from diff_data</span></span><br><span class="line"><span class="comment">// if diff_data uncompress(*out_compress_type==hpi_compressType_no), *out_uncompressSize==0;</span></span><br><span class="line"><span class="comment">// if (*out_compress_type!=hpi_compressType_no), you need open compressed data by decompresser</span></span><br><span class="line"><span class="comment">//      (see https://github.com/sisong/HPatchLite/decompresser_demo.h &amp; https://github.com/sisong/HPatchLite/hpatchi.c)</span></span><br><span class="line">hpi_BOOL <span class="title function_">hpatch_lite_open</span><span class="params">(hpi_TInputStreamHandle diff_data,hpi_TInputStream_read read_diff,</span></span><br><span class="line"><span class="params">                          hpi_compressType* out_compress_type,<span class="type">hpi_pos_t</span>* out_newSize,<span class="type">hpi_pos_t</span>* out_uncompressSize)</span>;</span><br><span class="line"><span class="comment">//hpatch_lite patch</span></span><br><span class="line"><span class="comment">//used temp_cache_size memory + &#123;decompress buffer*1&#125;</span></span><br><span class="line"><span class="comment">//  note: temp_cache_size&gt;=hpi_kMinCacheSize</span></span><br><span class="line">hpi_BOOL <span class="title function_">hpatch_lite_patch</span><span class="params">(<span class="type">hpatchi_listener_t</span>* listener,<span class="type">hpi_pos_t</span> newSize,</span></span><br><span class="line"><span class="params">                           hpi_byte* temp_cache,<span class="type">hpi_size_t</span> temp_cache_size)</span>;</span><br></pre></td></tr></table></figure><p>试着分析一下：</p><p><strong>差分包头信息读取接口</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 差分包头信息读取接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param hpi_TInputStreamHandle        diff_data           注意此处入参：差分数据流句柄（个人理解：如果不需要该句柄的话可以将其定义为空指针）</span></span><br><span class="line"><span class="comment"> * @param hpi_TInputStream_read         read_diff           注意此处入参：差分数据流读取函数（用户实现：以数据流的方式读取外部存储中差分数据分区的数据）</span></span><br><span class="line"><span class="comment"> * @param hpi_compressType             *out_compress_type   差分包头信息：差分包压缩类型</span></span><br><span class="line"><span class="comment"> * @param hpi_pos_t                    *out_newSize         差分包头信息：还原数据的长度</span></span><br><span class="line"><span class="comment"> * @param hpi_pos_t                    *out_uncompressSize  差分包头信息：解压之后的长度（如果差分包未被压缩则*out_uncompressSize输出0）</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">hpi_BOOL <span class="title function_">hpatch_lite_open</span><span class="params">(hpi_TInputStreamHandle diff_data,hpi_TInputStream_read read_diff,hpi_compressType* out_compress_type,<span class="type">hpi_pos_t</span>* out_newSize,<span class="type">hpi_pos_t</span>* out_uncompressSize)</span>;</span><br></pre></td></tr></table></figure><p><strong>差分包头定义</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> hpi_kHeadSize (2+1+1) <span class="comment">//&quot;hI&quot; + hpi_compressType + (versionCode + newSize_Bytes + uncompressSize_Bytes) &#123; + newSize + uncompressSize&#125; &#123; + dictSize&#125;</span></span></span><br><span class="line">差分包头[<span class="number">0</span>] : 魔术数字 <span class="number">68</span> <span class="string">&#x27;h&#x27;</span></span><br><span class="line">差分包头[<span class="number">1</span>] : 魔术数字 <span class="number">49</span> <span class="string">&#x27;I&#x27;</span></span><br><span class="line">差分包头[<span class="number">2</span>] : 压缩类型</span><br><span class="line">差分包头[<span class="number">3</span>] : 版本代码[<span class="number">7</span>:<span class="number">6</span>]+解压数据长度所占的字节数u[<span class="number">5</span>:<span class="number">3</span>]+还原数据长度所占的字节数n[<span class="number">2</span>:<span class="number">0</span>]</span><br><span class="line">差分包头[<span class="number">4</span> ~ <span class="number">4</span>+n] : 还原数据长度</span><br><span class="line">差分包头[? ~ ?+u] : 解压数据长度</span><br><span class="line"></span><br><span class="line">压缩包头[? ~ ?+<span class="number">4</span>] : 压缩字典大小</span><br></pre></td></tr></table></figure><p><strong>差分还原接口</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 差分还原接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param hpatchi_listener_t            listener            详见 hpatchi_listener_t 分析</span></span><br><span class="line"><span class="comment"> * @param hpi_pos_t                     newSize             还原数据的长度</span></span><br><span class="line"><span class="comment"> * @param hpi_byte                     *temp_cache          还原缓冲的地址</span></span><br><span class="line"><span class="comment"> * @param hpi_size_t                    temp_cache_size     还原缓冲的大小（&gt;=2）</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">hpi_BOOL <span class="title function_">hpatch_lite_patch</span><span class="params">(<span class="type">hpatchi_listener_t</span>* listener,<span class="type">hpi_pos_t</span> newSize,hpi_byte* temp_cache,<span class="type">hpi_size_t</span> temp_cache_size)</span>;</span><br></pre></td></tr></table></figure><p><strong>hpatchi_listener_t</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">hpatchi_listener_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    hpi_TInputStreamHandle  diff_data;</span><br><span class="line">    hpi_TInputStream_read   read_diff;</span><br><span class="line">    hpi_BOOL (*read_old)(<span class="keyword">struct</span> <span class="type">hpatchi_listener_t</span>* listener,<span class="type">hpi_pos_t</span> read_from_pos,hpi_byte* out_data,<span class="type">hpi_size_t</span> data_size);</span><br><span class="line">    hpi_BOOL (*write_new)(<span class="keyword">struct</span> <span class="type">hpatchi_listener_t</span>* listener,<span class="type">const</span> hpi_byte* data,<span class="type">hpi_size_t</span> data_size);</span><br><span class="line">&#125; <span class="type">hpatchi_listener_t</span>;</span><br></pre></td></tr></table></figure><p><strong>hpatchi_listener_t 实例（差分包未经压缩）</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">hpatchi_listener_t</span> listener =</span><br><span class="line">&#123;</span><br><span class="line">    .diff_data = 差分数据流句柄,</span><br><span class="line">    .read_diff = 差分数据流读取函数,    由用户去实现（从外部存储的差分数据分区读取）（函数一）</span><br><span class="line"></span><br><span class="line">    .read_old  = 旧版数据流读取函数,    由用户去实现（从内部存储的旧版程序分区读取）（函数二）</span><br><span class="line">    .write_new = 还原数据流写入函数,    由用户去实现（写入到外部存储的还原程序分区）（函数三）</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>hpatchi_listener_t 实例（差分包经过压缩）</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">tuz_TStream _tuz_stream = <span class="comment">/* 压缩数据流句柄 */</span></span><br><span class="line">&#123;</span><br><span class="line">    .in_Stream = 差分数据流句柄,</span><br><span class="line">    .read_code = 差分数据流读取函数,    由用户去实现（从外部存储的差分数据分区读取）（函数一）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">hpatchi_listener_t</span> listener =</span><br><span class="line">&#123;</span><br><span class="line">    .diff_data = 压缩数据流句柄,        _tuz_stream</span><br><span class="line">    .read_diff = 压缩数据流解压函数,    _tuz_TStream_decompress() <span class="comment">// decompresser_demo.h</span></span><br><span class="line"></span><br><span class="line">    .read_old  = 旧版数据流读取函数,    由用户去实现（从内部存储的旧版程序分区读取）（函数二）</span><br><span class="line">    .write_new = 还原数据流写入函数,    由用户去实现（写入到外部存储的还原程序分区）（函数三）</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后需要特别注意的一点是：差分包必须由 create_lite_diff() 函数创建。宏观上来说就是差分包必须要通过 hdiffi.exe 程序生成，不能使用 hdiffz.exe 生成。</p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该回调函数由用户提供</span></span><br><span class="line">hpi_BOOL 差分数据流读取函数()</span><br><span class="line">&#123;</span><br><span class="line">    由用户实现</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该回调函数由用户提供</span></span><br><span class="line">hpi_BOOL 旧版数据流读取函数()</span><br><span class="line">&#123;</span><br><span class="line">    由用户实现</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该回调函数由用户提供</span></span><br><span class="line">hpi_BOOL 还原数据流写入函数()</span><br><span class="line">&#123;</span><br><span class="line">    由用户实现</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 hpatch_lite_open() 和 hpatch_lite_patch() 编写的还原程序</span></span><br><span class="line"><span class="type">hpi_patch_result_t</span> <span class="title function_">hpi_patch</span><span class="params">(listener, “还原缓冲大小”, “解压缓冲大小”, “差分数据流读取函数”, “旧版数据流读取函数”, “还原数据流写入函数”)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 差分数据流句柄：如果不需要该句柄的话可以将其定义为空指针</span></span><br><span class="line">    hpatch_lite_open(“差分数据流句柄”, “差分数据流读取函数”, 输出“差分包信息”);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    解压缓冲地址 = <span class="built_in">malloc</span>();</span><br><span class="line">    解压字典大小 = _tuz_TStream_getReservedMemSize(“差分数据流句柄”, “差分数据流读取函数”);</span><br><span class="line">    tuz_TStream_open(_tuz_stream, “差分数据流句柄”, “差分数据流读取函数”, “解压缓冲地址”, “解压字典大小”, “解压缓冲大小”);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    patch_listener</span><br><span class="line">        .diff_data = _tuz_stream</span><br><span class="line">        .read_diff = _tuz_TStream_decompress() <span class="comment">// decompresser_demo.h</span></span><br><span class="line">        .read_old  = 旧版数据流读取函数()</span><br><span class="line">        .write_new = 还原数据流写入函数()</span><br><span class="line"></span><br><span class="line">    还原缓冲地址 = <span class="built_in">malloc</span>();</span><br><span class="line"></span><br><span class="line">    hpatch_lite_patch(“patch_listener”, “还原数据期望长度”, “还原缓冲地址”, “还原缓冲大小”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c"><figcaption><span>hpatch_conf.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __hpatch_conf_h__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __hpatch_conf_h__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rtthread.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> hpi_malloc(x) rt_malloc(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> hpi_free(x)   rt_free(x)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __hpatch_conf_h__ */</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>hpatch_impl.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __hpatch_impl_h__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __hpatch_impl_h__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hpatch_lite.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;patch_types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;decompresser_demo.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">hpi_patch_result_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    HPATCHI_SUCCESS = <span class="number">0</span>,</span><br><span class="line">    HPATCHI_OPTIONS_ERROR,</span><br><span class="line">    HPATCHI_PATHTYPE_ERROR,</span><br><span class="line">    HPATCHI_OPENREAD_ERROR,</span><br><span class="line">    HPATCHI_OPENWRITE_ERROR,</span><br><span class="line">    HPATCHI_FILEREAD_ERROR,</span><br><span class="line">    HPATCHI_FILEWRITE_ERROR,</span><br><span class="line">    HPATCHI_FILEDATA_ERROR,</span><br><span class="line">    HPATCHI_FILECLOSE_ERROR,</span><br><span class="line">    HPATCHI_MEM_ERROR,</span><br><span class="line">    HPATCHI_COMPRESSTYPE_ERROR,</span><br><span class="line">    HPATCHI_DECOMPRESSER_DICT_ERROR,</span><br><span class="line">    HPATCHI_DECOMPRESSER_OPEN_ERROR,</span><br><span class="line">    HPATCHI_DECOMPRESSER_CLOSE_ERROR,</span><br><span class="line">    HPATCHI_PATCH_OPEN_ERROR = <span class="number">20</span>,</span><br><span class="line">    HPATCHI_PATCH_ERROR,</span><br><span class="line">&#125; <span class="type">hpi_patch_result_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">hpi_BOOL</span> <span class="params">(*<span class="type">read_old_t</span>)</span><span class="params">(<span class="keyword">struct</span> <span class="type">hpatchi_listener_t</span> *listener, <span class="type">hpi_pos_t</span> addr, hpi_byte *data, <span class="type">hpi_size_t</span> size)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">hpi_BOOL</span> <span class="params">(*<span class="type">write_new_t</span>)</span><span class="params">(<span class="keyword">struct</span> <span class="type">hpatchi_listener_t</span> *listener, <span class="type">const</span> hpi_byte *data, <span class="type">hpi_size_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">hpi_patch</span><span class="params">(<span class="type">hpatchi_listener_t</span> *listener, <span class="type">int</span> patch_cache_size, <span class="type">int</span> decompress_cache_size, hpi_TInputStream_read _do_read_diff, <span class="type">read_old_t</span> _do_read_old, <span class="type">write_new_t</span> _do_write_new)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __hpatch_impl_h__ */</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>hpatch_impl.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hpatch_impl.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hpatch_conf.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">hpi_patch_result_t</span> <span class="title function_">hpi_patch</span><span class="params">(<span class="type">hpatchi_listener_t</span> *listener, <span class="type">int</span> patch_cache_size, <span class="type">int</span> decompress_cache_size, hpi_TInputStream_read _do_read_diff, <span class="type">read_old_t</span> _do_read_old, <span class="type">write_new_t</span> _do_write_new)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">hpi_patch_result_t</span> result = HPATCHI_SUCCESS;</span><br><span class="line">    hpi_byte *pmem            = <span class="number">0</span>;</span><br><span class="line">    hpi_byte *patch_cache;</span><br><span class="line"></span><br><span class="line">    hpi_compressType compress_type;</span><br><span class="line">    <span class="type">hpi_pos_t</span> new_size;</span><br><span class="line">    <span class="type">hpi_pos_t</span> uncompress_size;</span><br><span class="line"></span><br><span class="line">    hpi_BOOL patch_result;</span><br><span class="line">    patch_result = hpatch_lite_open(listener, _do_read_diff, &amp;compress_type, &amp;new_size, &amp;uncompress_size);</span><br><span class="line">    <span class="keyword">if</span> (patch_result != hpi_TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        result = HPATCHI_PATCH_OPEN_ERROR;</span><br><span class="line">        <span class="keyword">goto</span> clear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    listener-&gt;read_old  = _do_read_old;</span><br><span class="line">    listener-&gt;write_new = _do_write_new;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (compress_type)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> hpi_compressType_no: <span class="comment">// memory size: patch_cache_size</span></span><br><span class="line">        &#123;</span><br><span class="line">            pmem = (hpi_byte *)hpi_malloc(patch_cache_size);</span><br><span class="line">            <span class="keyword">if</span> (!pmem)</span><br><span class="line">            &#123;</span><br><span class="line">                result = HPATCHI_MEM_ERROR;</span><br><span class="line">                <span class="keyword">goto</span> clear;</span><br><span class="line">            &#125;</span><br><span class="line">            patch_cache = pmem;</span><br><span class="line"></span><br><span class="line">            listener-&gt;diff_data = listener;</span><br><span class="line">            listener-&gt;read_diff = _do_read_diff;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _CompressPlugin_tuz</span></span><br><span class="line">        <span class="keyword">case</span> hpi_compressType_tuz: <span class="comment">// requirements memory size: patch_cache_size + decompress_cache_size + decompress_dict_size</span></span><br><span class="line">        &#123;</span><br><span class="line">            tuz_TStream tuz_stream_handle;</span><br><span class="line"></span><br><span class="line">            <span class="type">size_t</span> decompress_dict_size = _tuz_TStream_getReservedMemSize(listener, _do_read_diff);</span><br><span class="line">            <span class="keyword">if</span> (decompress_dict_size &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result = HPATCHI_DECOMPRESSER_DICT_ERROR;</span><br><span class="line">                <span class="keyword">goto</span> clear;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pmem = (hpi_byte *)hpi_malloc(decompress_dict_size + decompress_cache_size + patch_cache_size);</span><br><span class="line">            <span class="keyword">if</span> (!pmem)</span><br><span class="line">            &#123;</span><br><span class="line">                result = HPATCHI_MEM_ERROR;</span><br><span class="line">                <span class="keyword">goto</span> clear;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tuz_TResult tuz_result = tuz_TStream_open(&amp;tuz_stream_handle, listener, _do_read_diff, pmem, (<span class="type">tuz_size_t</span>)decompress_dict_size, (<span class="type">tuz_size_t</span>)decompress_cache_size);</span><br><span class="line">            <span class="keyword">if</span> (tuz_result != tuz_OK)</span><br><span class="line">            &#123;</span><br><span class="line">                result = HPATCHI_DECOMPRESSER_OPEN_ERROR;</span><br><span class="line">                <span class="keyword">goto</span> clear;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            patch_cache = pmem + decompress_dict_size + decompress_cache_size;</span><br><span class="line"></span><br><span class="line">            listener-&gt;diff_data = &amp;tuz_stream_handle;</span><br><span class="line">            listener-&gt;read_diff = _tuz_TStream_decompress;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            result = HPATCHI_COMPRESSTYPE_ERROR;</span><br><span class="line">            <span class="keyword">goto</span> clear;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    patch_result = hpatch_lite_patch(listener, new_size, patch_cache, (<span class="type">hpi_size_t</span>)patch_cache_size);</span><br><span class="line">    <span class="keyword">if</span> (patch_result != hpi_TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        result = HPATCHI_PATCH_ERROR;</span><br><span class="line">        <span class="keyword">goto</span> clear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">clear:</span><br><span class="line">    <span class="keyword">if</span> (pmem)</span><br><span class="line">    &#123;</span><br><span class="line">        hpi_free(pmem);</span><br><span class="line">        pmem = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>hpatch_demo.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hpatch_impl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">hpatchi_instance_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">hpatchi_listener_t</span> parent;</span><br><span class="line">    <span class="type">int</span> patch_file_offset;</span><br><span class="line">    <span class="type">int</span> patch_file_len;</span><br><span class="line">    <span class="type">int</span> patch_read_pos;</span><br><span class="line">    <span class="type">int</span> newer_file_len;</span><br><span class="line">    <span class="type">int</span> newer_write_pos;</span><br><span class="line">&#125; <span class="type">hpatchi_instance_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以数据流的形式读取空文件</span></span><br><span class="line">hpi_BOOL _do_read_empty(<span class="keyword">struct</span> <span class="type">hpatchi_listener_t</span> *listener, <span class="type">hpi_pos_t</span> addr, hpi_byte *data, <span class="type">hpi_size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(data, <span class="number">0</span>, size);</span><br><span class="line">    <span class="keyword">return</span> hpi_TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以数据流的形式读取旧程序</span></span><br><span class="line">hpi_BOOL _do_read_old(<span class="keyword">struct</span> <span class="type">hpatchi_listener_t</span> *listener, <span class="type">hpi_pos_t</span> addr, hpi_byte *data, <span class="type">hpi_size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result = update_fetch_runapp(addr, data, size);</span><br><span class="line">    <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123; <span class="keyword">return</span> hpi_FALSE; &#125;</span><br><span class="line">    <span class="keyword">return</span> hpi_TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以数据流的形式读取补丁包（由用户记录数据流的位置：读到哪儿了）</span></span><br><span class="line">hpi_BOOL _do_read_patch(hpi_TInputStreamHandle input_stream, hpi_byte *data, <span class="type">hpi_size_t</span> *size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">hpatchi_instance_t</span> *instance = (<span class="type">hpatchi_instance_t</span> *)input_stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据流结束时需要将 *size 置为当前所读数据的实际长度（*size == decompress_cache_size）</span></span><br><span class="line">    <span class="keyword">if</span> ((instance-&gt;patch_read_pos + *size) &gt; instance-&gt;patch_file_len)</span><br><span class="line">    &#123;</span><br><span class="line">        *size = instance-&gt;patch_file_len - instance-&gt;patch_read_pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = update_fetch_backup(instance-&gt;patch_file_offset + instance-&gt;patch_read_pos, data, *size);</span><br><span class="line">    <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123; <span class="keyword">return</span> hpi_FALSE; &#125;</span><br><span class="line">    instance-&gt;patch_read_pos += *size;</span><br><span class="line">    <span class="keyword">return</span> hpi_TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以数据流的形式写入差分还原的数据（由用户记录数据流的位置：写到哪儿了）</span></span><br><span class="line">hpi_BOOL _do_write_new(<span class="keyword">struct</span> <span class="type">hpatchi_listener_t</span> *listener, <span class="type">const</span> hpi_byte *data, <span class="type">hpi_size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">hpatchi_instance_t</span> *instance = (<span class="type">hpatchi_instance_t</span> *)listener;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> percent = instance-&gt;newer_write_pos * <span class="number">100</span> / instance-&gt;newer_file_len;</span><br><span class="line">    <span class="keyword">if</span> (percent % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; percent &lt; <span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;\b\b\b%02d%%&quot;</span>, percent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = update_write_decode(instance-&gt;newer_write_pos, (<span class="type">unsigned</span> <span class="type">char</span> *)data, size);</span><br><span class="line">    <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123; <span class="keyword">return</span> hpi_FALSE; &#125;</span><br><span class="line">    instance-&gt;newer_write_pos += size;</span><br><span class="line">    <span class="keyword">return</span> hpi_TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demo</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">hpatchi_instance_t</span> instance = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    instance.patch_file_offset  = update_pack-&gt;header_size; <span class="comment">// 从升级包的包头中获取差分数据的地址</span></span><br><span class="line">    instance.patch_file_len     = update_pack-&gt;remain_size; <span class="comment">// 从升级包的包头中获取差分数据的大小</span></span><br><span class="line">    instance.newer_file_len     = update_pack-&gt;newapp_size; <span class="comment">// 从升级包的包头中获取新版程序的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 差分全量升级</span></span><br><span class="line">    &#123;</span><br><span class="line">        hpi_patch(&amp;instance.parent, <span class="number">128</span>, <span class="number">128</span>, _do_read_patch, _do_read_empty, _do_write_new);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 差分增量升级</span></span><br><span class="line">    &#123;</span><br><span class="line">        hpi_patch(&amp;instance.parent, <span class="number">128</span>, <span class="number">128</span>, _do_read_patch, _do_read_old, _do_write_new);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近发现了一个优秀的差分还原算法：hdiff &amp;amp; hpatch，它通过数据流的思想把 O(n) 的空间复杂度转嫁给了硬盘，使得内存的开销极低，非常适合应用于嵌入式领域。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sulfurandcu.io/cloidefbf00hzv0rqa7zg722r/diff.tools.compare.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="开发笔记" scheme="https://sulfurandcu.github.io/sulfurandcu.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="嵌入式软件开发" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="在线升级" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%9C%A8%E7%BA%BF%E5%8D%87%E7%BA%A7/"/>
    
    <category term="差分还原算法" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%B7%AE%E5%88%86%E8%BF%98%E5%8E%9F%E7%AE%97%E6%B3%95/"/>
    
    <category term="增量升级" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%A2%9E%E9%87%8F%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式 IAP 在线升级－程序设计</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/clnyhr2n4005410rqfyjmedv1.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/clnyhr2n4005410rqfyjmedv1.html</id>
    <published>2023-09-30T16:00:03.000Z</published>
    <updated>2023-09-30T16:00:03.000Z</updated>
    
    <content type="html"><![CDATA[<pre class="mermaid">flowchart TB%%{init: { &quot;flowchart&quot;: { &quot;curve&quot;: &quot;basis&quot; } } }%%A1(引导程序之流程)--&gt;B1(......)--&gt;C1(跳转至应用程序)A2(应用程序之流程)--&gt;B2(......)--&gt;C2(跳转至引导程序)</pre><span id="more"></span><h2 id="引导程序流程"><a href="#引导程序流程" class="headerlink" title="引导程序流程"></a>引导程序流程</h2><pre class="mermaid">flowchart TB%%{init: { &quot;flowchart&quot;: { &quot;curve&quot;: &quot;basis&quot; } } }%%PowerReset(设备上电复位)--&gt;IapStart(引导程序开始)--&gt;IapCheckApp[检查应用程序&lt;br&gt;检查升级标识&lt;br&gt;检查停留标识]--&gt;IapIsAppValid{程序有效&lt;br&gt;无需升级&lt;br&gt;无需停留}IapIsAppValid--是--&gt;IapJumpToApp[跳转进入应用程序]--&gt;IapOver(引导程序结束)IapIsAppValid--否--&gt;IapInit[配置相关外设]--&gt;IapCatchKeyboardInput{检测按键}IapCatchKeyboardInput--持续一秒--&gt;IapCatchKeyboardInputIapCatchKeyboardInput--有回车键按下&lt;br&gt;或&lt;br&gt;升级控制区中的停留标识立起---&gt;IapSetStayFlag[置位停留标识]--&gt;IapIsHaveUpdateData{是否存在&lt;br&gt;升级数据}IapCatchKeyboardInput--超时--&gt;IapIsHaveUpdateDataIapIsHaveUpdateData--否---&gt;IapIsNeedWait{是否停留}IapIsNeedWait--否--&gt;IapBeforeJumpIapIsNeedWait--是--&gt;IapWait{延时计数}IapWait--持续一分钟--&gt;IapWaitIapWait--超时--------&gt;IapBeforeJumpIapIsHaveUpdateData--是--&gt;IapDoUpdate[执行升级操作]---&gt;IapIsUpdateSucc{升级成功}IapIsUpdateSucc--是---&gt;IapBeforeJump[关闭外设和中断]--&gt;IapJumpToAppIapIsUpdateSucc--否--&gt;IapIsAppExist{程序完好}IapIsAppExist--是--&gt;IapBeforeJumpIapIsAppExist--否--&gt;IapComm[留在引导程序&lt;br&gt;执行交互任务]--&gt;IapIsRecvDone{收到升级包}IapIsRecvDone--否--&gt;IapCommIapIsRecvDone--是--&gt;IapDoUpdate</pre><h2 id="应用程序流程"><a href="#应用程序流程" class="headerlink" title="应用程序流程"></a>应用程序流程</h2><pre class="mermaid">flowchart TB%%{init: { &quot;flowchart&quot;: { &quot;curve&quot;: &quot;basis&quot; } } }%%AppStart(应用程序开始)--&gt;AppRemap[重定向中断向量表]--&gt;AppInit[配置相关外设]--&gt;AppTask[执行应用功能&lt;br&gt;执行通信任务]--&gt;AppIsRecvDone{收到升级包}AppIsRecvDone--否--&gt;AppTaskAppIsRecvDone--是--&gt;AppSetAppInvalid[设置升级标识]--&gt;AppBeforeJump[关闭外设和中断]--&gt;AppJumpToIap[重启进入引导程序｜跳转进入引导程序]--&gt;AppOver(应用程序结束)</pre>]]></content>
    
    
    <summary type="html">&lt;pre class=&quot;mermaid&quot;&gt;
flowchart TB
%%{init: { &amp;quot;flowchart&amp;quot;: { &amp;quot;curve&amp;quot;: &amp;quot;basis&amp;quot; } } }%%
A1(引导程序之流程)--&amp;gt;B1(......)--&amp;gt;C1(跳转至应用程序)
A2(应用程序之流程)--&amp;gt;B2(......)--&amp;gt;C2(跳转至引导程序)
&lt;/pre&gt;</summary>
    
    
    
    <category term="开发笔记" scheme="https://sulfurandcu.github.io/sulfurandcu.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="嵌入式软件开发" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="在线升级" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%9C%A8%E7%BA%BF%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式 IAP 在线升级－整体方案</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/clnyhr2n3004y10rq322c66uu.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/clnyhr2n3004y10rq322c66uu.html</id>
    <published>2023-09-30T16:00:02.000Z</published>
    <updated>2023-09-30T16:00:02.000Z</updated>
    
    <content type="html"><![CDATA[<pre class="mermaid">flowchart LR%%{init: { &quot;flowchart&quot;: { &quot;curve&quot;: &quot;basis&quot; } } }%%    full_update(全量差分包)    diff_update(增量差分包)    app(大程序)    iap(小程序)    dnload(数据暂存区)    backup(数据暂存区)    runapp(程序运行区)    decode(数据解码区)    full_update--&gt;app    full_update--&gt;iap    diff_update--&gt;app    diff_update--&gt;iap    app--&gt;dnload    iap--&gt;dnload    dnload--跳转至小程序--&gt;backup    backup-.㈣&lt;br&gt;回滚旧程序.-&gt;runapp    backup--㈠&lt;br&gt;解码升级包--&gt;decode    decode--㈢&lt;br&gt;写入新程序--&gt;runapp    runapp--㈡&lt;br&gt;备份旧程序--&gt;backup</pre><span id="more"></span><h2 id="当前方案"><a href="#当前方案" class="headerlink" title="当前方案"></a>当前方案</h2><ul><li>支持差分升级（hdiffpatchlite）</li><li>支持命令交互</li><li>支持 Y-Modem</li><li>支持异常回滚</li><li>支持快速启动</li><li>空间占用情况（40KB + 1个扇区）<ul><li>目前程序大小为 31.5KB，建议预留 40KB 的空间。</li><li>另外还需要一个扇区作为引导程序与应用程序的共享空间，唤作「升级控制区」。</li><li>如果开启快速启动，升级控制区必须放在内部 FLASH 中。</li><li>如果关闭快速启动，升级控制区可以放在内部 FLASH 中，也可以放在外部 FLASH 中。</li></ul></li></ul><div class="note info no-icon"><p><strong>快速启动：</strong>上电后首先检查应用程序的有效性，有效则立即跳转，无效则留在引导程序中。优点是启动速度快，但不支持按回车键留在引导程序。</p></div><h2 id="程序分工"><a href="#程序分工" class="headerlink" title="程序分工"></a>程序分工</h2><p>众所周知，人不能踩着自己的脚上天，应用程序升级亦是如此，所以需要借助 bootloader 来完成自身的替换操作。</p><table><thead><tr><th align="center">分工条目</th><th align="center">引导程序</th><th align="center">应用程序</th></tr></thead><tbody><tr><td align="center">程序解码</td><td align="center">✔</td><td align="center"></td></tr><tr><td align="center">备份回滚</td><td align="center">✔</td><td align="center"></td></tr><tr><td align="center">程序替换</td><td align="center">✔</td><td align="center"></td></tr><tr><td align="center">命令交互</td><td align="center">✔</td><td align="center">✔</td></tr><tr><td align="center">数据存取</td><td align="center">✔</td><td align="center">✔</td></tr><tr><td align="center">数据传输</td><td align="center">基础的通信协议栈</td><td align="center">完备的通信协议栈</td></tr></tbody></table><p>应用程序（大程序）集成完备的通信协议栈，只负责接收、存储和校验升级包。</p><p>引导程序（小程序）集成基础的通信协议栈，没有应用程序或应用程序异常时也能进行升级。</p><h2 id="存储空间"><a href="#存储空间" class="headerlink" title="存储空间"></a>存储空间</h2><h3 id="1"><a href="#1" class="headerlink" title="#1"></a>#1</h3><table><thead><tr><th align="center">内部flash存储空间划分</th><th align="center">内部flash存储空间细分</th></tr></thead><tbody><tr>    <td align="center" rowspan="2">引导程序区</td>    <td align="center">中断向量表</td></tr><tr>    <td align="center">引导程序</td></tr><tr>    <td align="center">升级控制区</td>    <td align="center">升级状态</td></tr><tr>    <td align="center" rowspan="2">应用程序区</td>    <td align="center">重定向的中断向量表</td></tr><tr>    <td align="center">运行中的旧程序</td></tr></tbody><thead><tr><th align="center">外部flash存储空间划分</th><th align="center">外部flash存储空间细分</th></tr></thead><tbody><tr>    <td align="center">数据暂存区</td>    <td align="center">接收到的升级包<br>备份来的旧程序</td></tr></tbody><tbody><tr>    <td align="center">数据解码区</td>    <td align="center">解码后的新程序</td></tr></tbody></table><div class="note info no-icon"><p>通用方案</p></div><h3 id="2"><a href="#2" class="headerlink" title="#2"></a>#2</h3><table><thead><tr><th align="center">内部flash存储空间划分</th><th align="center">内部flash存储空间细分</th></tr></thead><tbody><tr>    <td align="center" rowspan="2">引导程序区</td>    <td align="center">中断向量表</td></tr><tr>    <td align="center">引导程序</td></tr><tr>    <td align="center">升级控制区</td>    <td align="center">升级状态</td></tr><tr>    <td align="center" rowspan="2">应用程序区</td>    <td align="center">重定向的中断向量表</td></tr><tr>    <td align="center">运行中的旧程序</td></tr></tbody><tbody><tr>    <td align="center">数据暂存区</td>    <td align="center">接收到的升级包<br>备份来的旧程序</td></tr></tbody><tbody><tr>    <td align="center">数据解码区</td>    <td align="center">解码后的新程序</td></tr></tbody></table><div class="note info no-icon"><p>低成本产品（没有外部存储芯片）的方案</p></div><h3 id="3"><a href="#3" class="headerlink" title="#3"></a>#3</h3><table><thead><tr><th align="center">内部flash存储空间划分</th><th align="center">内部flash存储空间细分</th></tr></thead><tbody><tr>    <td align="center" rowspan="2">引导程序区</td>    <td align="center">中断向量表</td></tr><tr>    <td align="center">引导程序</td></tr><tr>    <td align="center">升级控制区</td>    <td align="center">升级状态</td></tr><tr>    <td align="center" rowspan="2">应用程序区<br>（Ａ）</td>    <td align="center">重定向的中断向量表</td></tr><tr>    <td align="center">上一版的旧程序</td></tr><tr>    <td align="center" rowspan="2">应用程序区<br>（Ｂ）</td>    <td align="center">重定向的中断向量表</td></tr><tr>    <td align="center">运行中的旧程序</td></tr></tbody><thead><tr><th align="center">外部flash存储空间划分</th><th align="center">外部flash存储空间细分</th></tr></thead><tbody><tr>    <td align="center">数据暂存区</td>    <td align="center">接收到的升级包</td></tr></tbody></table><div class="note danger no-icon"><p><strong>不推荐的方案</strong>：代码量不能超过 FLASH 的一半，并且在编译阶段要将应用程序Ａ和应用程序Ｂ链接到不同的地址空间，后期难以维护。</p></div><h2 id="增量升级"><a href="#增量升级" class="headerlink" title="增量升级"></a>增量升级</h2><p>全量升级由于要传输新版程序的完整镜像，因此升级时间通常较长，升级失败的概率也更大。那么能不能只传送差异数据呢？答案是可以。这种技术被称作增量升级&#x2F;差量升级&#x2F;差分升级。我个人更喜欢增量升级这个叫法，因为增量一定是差分，但是差分不一定是增量。</p><p>增量升级确实降低了传输过程中的数据量，但也带来了版本管理复杂的问题，所以说不能因为有了增量升级，全量升级就不用了。</p><table><tbody><tr>    <td align="center" rowspan="3">全量升级</td>    <td align="center">完整全量升级</td>    <td align="center">（✘）</td></tr><tr>    <td align="center">压缩全量升级</td>    <td align="center">（✘）</td></tr><tr>    <td align="center">差分全量升级</td>    <td align="center">（✔）</td></tr><tr>    <td align="center">增量升级</td>    <td align="center">差分增量升级</td>    <td align="center">（✔）</td></tr></tbody></table><h2 id="控制分区"><a href="#控制分区" class="headerlink" title="控制分区"></a>控制分区</h2><p>为了方便实现应用程序与引导程序之间的相互协作，需要单独拿出一个扇区的空间作为升级控制区。</p><ul><li>如果开启快速启动，升级控制区必须放在内部 FLASH 中。</li><li>如果关闭快速启动，升级控制区可以放在内部 FLASH 中，也可以放在外部 FLASH 中。</li></ul><p><strong>升级控制区的数据结构如下：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">update_step_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    update_step_verify = <span class="number">0x7FFFFFFF</span>,</span><br><span class="line">    update_step_decode = <span class="number">0x0000FFFF</span>,</span><br><span class="line">    update_step_backup = <span class="number">0x00000FFF</span>,</span><br><span class="line">    update_step_docopy = <span class="number">0x000000FF</span>,</span><br><span class="line">    update_step_revert = <span class="number">0x0000000F</span>,</span><br><span class="line">    update_step_finish = <span class="number">0x00000000</span>,</span><br><span class="line">&#125; <span class="type">update_step_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">update_ctrl_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> update_step; <span class="comment">// 升级阶段：指示升级流程执行到了哪个阶段</span></span><br><span class="line">    <span class="type">uint32_t</span> stayin_flag; <span class="comment">// 停留标识：0/-1表示在引导程序中不作停留</span></span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> backup_size; <span class="comment">// 引导程序内部备份和回滚用的变量（禁止在应用程序中修改）</span></span><br><span class="line">    <span class="type">uint32_t</span> backup_hash; <span class="comment">// 引导程序内部备份和回滚用的变量（禁止在应用程序中修改）</span></span><br><span class="line">&#125; <span class="type">update_ctrl_t</span>;</span><br></pre></td></tr></table></figure><h2 id="升级包头"><a href="#升级包头" class="headerlink" title="升级包头"></a>升级包头</h2><p>为了保证在线升级能够顺利进行，除了升级数据以外，我们还要向设备发送一些附加信息，这些附加信息通常被添加至升级文件的头部。</p><table><tbody><tr>    <td align="center">包头长度</td>    <td align="center">04B</td>    <td align="center">从「包头长度」开始计算</td></tr><tr>    <td align="center">包头校验</td>    <td align="center">04B</td>    <td align="center">从「数据长度」开始计算</td></tr><tr>    <td align="center">数据长度</td>    <td align="center">04B</td>    <td align="center">从「剩余数据」开始计算</td></tr><tr>    <td align="center">数据校验</td>    <td align="center">04B</td>    <td align="center">从「剩余数据」开始计算</td></tr><tr>    <td align="center">　</td>    <td align="center"></td>    <td align="center"></td></tr><tr>    <td align="center">产品代码</td>    <td align="center">08B</td>    <td align="center">避免给错误的设备升级</td></tr><tr>    <td align="center">产品代码</td>    <td align="center">08B</td>    <td align="center">避免给错误的设备升级</td></tr><tr>    <td align="center">　</td>    <td align="center"></td>    <td align="center"></td></tr><tr>    <td align="center">旧程序 LEN 值</td>    <td align="center">04B</td>    <td align="center"> 0xFFFFFFFF:全量镜像包<br>0x00000000:全量差分包<br>0xXXXXXXXX:增量差分包</td></tr><tr>    <td align="center">新程序 LEN 值</td>    <td align="center">04B</td>    <td align="center"></td></tr><tr>    <td align="center">旧程序 CRC 值</td>    <td align="center">04B</td>    <td align="center"></td></tr><tr>    <td align="center">新程序 CRC 值</td>    <td align="center">04B</td>    <td align="center"></td></tr><tr>    <td align="center">旧程序 MD5 值</td>    <td align="center">16B</td>    <td align="center"></td></tr><tr>    <td align="center">新程序 MD5 值</td>    <td align="center">16B</td>    <td align="center"></td></tr><tr>    <td align="center">......</td>    <td align="center"></td>    <td align="center"></td></tr><tr>    <td align="center">可以按需增加</td>    <td align="center"></td>    <td align="center"></td></tr></tbody></table><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">update_pack_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 包头 ################################################</span></span><br><span class="line">    <span class="type">uint32_t</span> header_size;               <span class="comment">// 包头长度</span></span><br><span class="line">    <span class="type">uint32_t</span> header_hash;               <span class="comment">// 包头校验</span></span><br><span class="line">    <span class="type">uint32_t</span> remain_size;               <span class="comment">// 包体长度</span></span><br><span class="line">    <span class="type">uint32_t</span> remain_hash;               <span class="comment">// 包体校验</span></span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> device_code[<span class="number">8</span>];       <span class="comment">// 产品代码</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> device_data[<span class="number">8</span>];       <span class="comment">// 产品代码</span></span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> oldapp_size;               <span class="comment">// 旧程序大小（LEN）（0xFFFFFFFF-全量镜像包, 0x00000000-全量差分包, 0xXXXXXXXX-增量差分包）</span></span><br><span class="line">    <span class="type">uint32_t</span> newapp_size;               <span class="comment">// 新程序大小（LEN）</span></span><br><span class="line">    <span class="type">uint32_t</span> oldapp_hash;               <span class="comment">// 旧程序校验（CRC）</span></span><br><span class="line">    <span class="type">uint32_t</span> newapp_hash;               <span class="comment">// 新程序校验（CRC）</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> oldapp_hash_md5[<span class="number">16</span>];  <span class="comment">// 旧程序校验（MD5）</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> newapp_hash_md5[<span class="number">16</span>];  <span class="comment">// 新程序校验（MD5）</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包体 ################################################</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> remain_data[];        <span class="comment">// 全量镜像包、全量差分包、增量差分包。</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="type">update_pack_t</span>;</span><br></pre></td></tr></table></figure><p><strong>变长包头</strong></p><p><img src="/sulfurandcu.io/clnyhr2n3004y10rq322c66uu/update.head.scalable.png"></p><div class="note info no-icon"><p>建议将升级包头设计成长度可变的，以便在扩展后还能兼容现场的旧设备。</p></div><h2 id="升级文件"><a href="#升级文件" class="headerlink" title="升级文件"></a>升级文件</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="/sulfurandcu.io/clnyhr2n3004y10rq322c66uu/update.file.full.image.png"></div><div class="group-picture-column"><img src="/sulfurandcu.io/clnyhr2n3004y10rq322c66uu/update.file.full.patch.png"></div><div class="group-picture-column"><img src="/sulfurandcu.io/clnyhr2n3004y10rq322c66uu/update.file.diff.patch.png"></div></div></div><h2 id="如何移植引导程序？"><a href="#如何移植引导程序？" class="headerlink" title="如何移植引导程序？"></a>如何移植引导程序？</h2><h3 id="创建一个分支"><a href="#创建一个分支" class="headerlink" title="创建一个分支"></a>创建一个分支</h3><p>当前模板工程用的是 vscode 和 eide 插件，请自行搜索 eide 插件的使用方式或参见：<a href="https://em-ide.com/zh-cn/docs/intro/">官方文档</a>。</p><p>基于模板工程创建小程序分支是比较推荐的方式，当然你也可以使用 baseline 中的代码自行创建一个不使用 eide 的工程，比如：Keil、IAR。</p><h3 id="修改板级配置（bsp-cfg-h）"><a href="#修改板级配置（bsp-cfg-h）" class="headerlink" title="修改板级配置（bsp_cfg.h）"></a>修改板级配置（bsp_cfg.h）</h3><ul><li><p><strong>配置 FLASH 的 SPIx 号</strong></p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define BSP_USING_SPI1</span><br></pre></td></tr></table></figure></li><li><p><strong>配置 RS485 的 URTx 号</strong></p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define BSP_USING_UART1</span><br></pre></td></tr></table></figure></li><li><p><strong>配置 FLASH 的通信引脚（SPI）</strong></p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define FLASH_SPI_SCK_PRT               GPIO_PORT_X         // SCLK</span><br><span class="line">#define FLASH_SPI_SCK_PIN               GPIO_PIN_XX</span><br><span class="line">#define FLASH_SPI_SCK_FNC               GPIO_FUNC_X</span><br><span class="line">#define FLASH_SPI_TXD_PRT               GPIO_PORT_X         // MOSI</span><br><span class="line">#define FLASH_SPI_TXD_PIN               GPIO_PIN_XX</span><br><span class="line">#define FLASH_SPI_TXD_FNC               GPIO_FUNC_X</span><br><span class="line">#define FLASH_SPI_RXD_PRT               GPIO_PORT_X         // MISO</span><br><span class="line">#define FLASH_SPI_RXD_PIN               GPIO_PIN_XX</span><br><span class="line">#define FLASH_SPI_RXD_FNC               GPIO_FUNC_X</span><br></pre></td></tr></table></figure></li><li><p><strong>配置 FLASH 的片选引脚</strong></p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define FLASH_CSB_PIN                   GET_PIN(X, XX)</span><br><span class="line">#define FLASH_CSB_LVL                   PIN_LOW</span><br></pre></td></tr></table></figure></li><li><p><strong>配置 FLASH 的供电引脚（如果有的话）</strong></p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define FLASH_PWR_PIN</span><br><span class="line">#define FLASH_PWR_LVL</span><br></pre></td></tr></table></figure></li><li><p><strong>配置 RS485 的通信引脚（URT）</strong></p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define RS485_URT_TXD_PRT               GPIO_PORT_X</span><br><span class="line">#define RS485_URT_TXD_PIN               GPIO_PIN_XX</span><br><span class="line">#define RS485_URT_TXD_FNC               GPIO_FUNC_X</span><br><span class="line">#define RS485_URT_RXD_PRT               GPIO_PORT_X</span><br><span class="line">#define RS485_URT_RXD_PIN               GPIO_PIN_XX</span><br><span class="line">#define RS485_URT_RXD_FNC               GPIO_FUNC_X</span><br></pre></td></tr></table></figure></li><li><p><strong>配置 RS485 的收发引脚</strong></p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define RS485_RTS_PIN                   GET_PIN(X, XX)</span><br><span class="line">#define RS485_RTS_LVL                   RT_SERIAL_HALF_DUPLEX_TX_HIGH // 高电平发送｜低电平发送</span><br><span class="line">#define RS485_RTS_DLY                   50 // 切换为发送模式后要延时的时间（微秒）</span><br></pre></td></tr></table></figure></li><li><p><strong>配置 LED 的控制引脚（如果有的话）</strong></p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define LED_PIN                         GET_PIN(X, XX)</span><br></pre></td></tr></table></figure></li><li><p><strong>配置 WDT 的喂狗引脚（如果有的话）</strong></p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define WDT_PIN                         GET_PIN(X, XX)</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改存储配置（fal-cfg-h）"><a href="#修改存储配置（fal-cfg-h）" class="headerlink" title="修改存储配置（fal_cfg.h）"></a>修改存储配置（fal_cfg.h）</h3><ul><li><p><strong>配置快速启动</strong></p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define BOOTLOADER_USING_FAST_MODE</span><br></pre></td></tr></table></figure></li><li><p><strong>配置存储空间</strong></p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define __booter_zone_size              ( 40 * 1024)        // 引导区（小程序）</span><br><span class="line">#define __update_zone_size              (  8 * 1024)        // 控制区</span><br><span class="line">#define __paramt_zone_size              ( 16 * 1024)        // 参数区</span><br><span class="line">#define __runapp_zone_size              (448 * 1024)        // 运行区（大程序）</span><br><span class="line">#define __backup_zone_size              (448 * 1024)        // 暂存区</span><br><span class="line">#define __decode_zone_size              (448 * 1024)        // 解码区</span><br><span class="line"></span><br><span class="line">#define __update_zone_addr              (__booter_zone_size)</span><br><span class="line">#define __runapp_zone_addr              (__booter_zone_size + __update_zone_size + __paramt_zone_size)</span><br><span class="line"></span><br><span class="line">/* partition table */</span><br><span class="line">#define FAL_PART_TABLE \</span><br><span class="line">&#123;   \</span><br><span class="line">    &#123;FAL_PART_MAGIC_WORD, &quot;bootloader&quot;, &quot;chipflash&quot;,                  0, __booter_zone_size, 0&#125;, /* 引导区 */ \</span><br><span class="line">    &#123;FAL_PART_MAGIC_WORD, &quot;update&quot;,     &quot;chipflash&quot;, __update_zone_addr, __update_zone_size, 0&#125;, /* 控制区 */ \</span><br><span class="line">    &#123;FAL_PART_MAGIC_WORD, &quot;runapp&quot;,     &quot;chipflash&quot;, __runapp_zone_addr, __runapp_zone_size, 0&#125;, /* 运行区 */ /* 原先的旧程序 */ \</span><br><span class="line">    \</span><br><span class="line">    &#123;FAL_PART_MAGIC_WORD, &quot;backup&quot;,     &quot;norflash0&quot;,                  0, __backup_zone_size, 0&#125;, /* 暂存区 */ /* 备份的旧程序 */ /* 下载的升级包 */ \</span><br><span class="line">    &#123;FAL_PART_MAGIC_WORD, &quot;decode&quot;,     &quot;norflash0&quot;, __backup_zone_size, __decode_zone_size, 0&#125;, /* 解码区 */ /* 解码的新程序 */ \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="如何制作升级文件？"><a href="#如何制作升级文件？" class="headerlink" title="如何制作升级文件？"></a>如何制作升级文件？</h2><h3 id="制作现场用的全量升级包"><a href="#制作现场用的全量升级包" class="headerlink" title="制作现场用的全量升级包"></a>制作现场用的全量升级包</h3><p>在 build 目录下新建一个批处理脚本：</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> ================================================================================</span><br><span class="line"><span class="built_in">echo</span> script.bat</span><br><span class="line"><span class="built_in">echo</span> ================================================================================</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> exepath=.\build</span><br><span class="line"><span class="built_in">set</span> binpath=.\build\gcc</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> product_code=XXXX0000</span><br><span class="line"><span class="built_in">set</span> product_data=<span class="number">00000000</span></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">ver</span>=<span class="variable">%binpath%</span>\main.old.specified.version.bin</span><br><span class="line"><span class="built_in">set</span> old=<span class="variable">%binpath%</span>\main.old.bin</span><br><span class="line"><span class="built_in">set</span> new=<span class="variable">%binpath%</span>\main.bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ooo=<span class="variable">%binpath%</span>\empty.bin</span><br><span class="line"><span class="built_in">set</span> patch_full=<span class="variable">%binpath%</span>\patch_full.bin</span><br><span class="line"><span class="built_in">set</span> patch_diff=<span class="variable">%binpath%</span>\patch_diff.bin</span><br><span class="line"><span class="built_in">set</span> patch_diff_specified_version=<span class="variable">%binpath%</span>\patch_diff.specified.version.bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> UpdateFullZIP=<span class="variable">%binpath%</span>\update.pkg.full.zip.bin</span><br><span class="line"><span class="built_in">set</span> UpdateDiffZIP=<span class="variable">%binpath%</span>\update.pkg.diff.zip.bin</span><br><span class="line"><span class="built_in">set</span> UpdateDiffZIP_SPECIFIED_VERSION=<span class="variable">%binpath%</span>\update.pkg.diff.zip.specified.version.bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span>. &gt; <span class="variable">%binpath%</span>\empty.bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ================================================================================</span><br><span class="line"><span class="built_in">echo</span> backup</span><br><span class="line"><span class="built_in">echo</span> ================================================================================</span><br><span class="line"><span class="built_in">copy</span> <span class="variable">%new%</span> <span class="variable">%old%</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ================================================================================</span><br><span class="line"><span class="built_in">echo</span> hdiffi.exe</span><br><span class="line"><span class="built_in">echo</span> ================================================================================</span><br><span class="line"><span class="variable">%exepath%</span>\hdiffi.exe -c-tuz-<span class="number">1024</span> -f <span class="variable">%ooo%</span> <span class="variable">%new%</span> <span class="variable">%patch_full%</span></span><br><span class="line"><span class="variable">%exepath%</span>\hdiffi.exe -c-tuz-<span class="number">1024</span> -f <span class="variable">%old%</span> <span class="variable">%new%</span> <span class="variable">%patch_diff%</span></span><br><span class="line"><span class="variable">%exepath%</span>\hdiffi.exe -c-tuz-<span class="number">1024</span> -f <span class="variable">%ver%</span> <span class="variable">%new%</span> <span class="variable">%patch_diff_specified_version%</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ================================================================================</span><br><span class="line"><span class="built_in">echo</span> header.exe</span><br><span class="line"><span class="built_in">echo</span> ================================================================================</span><br><span class="line"><span class="variable">%exepath%</span>\update_header_v2.exe  <span class="variable">%product_code%</span>  <span class="variable">%product_data%</span>  <span class="variable">%UpdateFullZIP%</span>  <span class="variable">%patch_full%</span>  <span class="variable">%new%</span></span><br><span class="line"><span class="variable">%exepath%</span>\update_header_v2.exe  <span class="variable">%product_code%</span>  <span class="variable">%product_data%</span>  <span class="variable">%UpdateDiffZIP%</span>  <span class="variable">%patch_diff%</span>  <span class="variable">%new%</span>  <span class="variable">%old%</span></span><br><span class="line"><span class="variable">%exepath%</span>\update_header_v2.exe  <span class="variable">%product_code%</span>  <span class="variable">%product_data%</span>  <span class="variable">%UpdateDiffZIP_SPECIFIED_VERSION%</span>  <span class="variable">%patch_diff_specified_version%</span>  <span class="variable">%new%</span>  <span class="variable">%ver%</span></span><br></pre></td></tr></table></figure><p>把 hdiffi.exe 和 update_header_v2.exe 拷贝到 .&#x2F;build 目录下</p><p><img src="/sulfurandcu.io/clnyhr2n3004y10rq322c66uu/update.header.v2.png"></p><p>修改以下变量：</p><ul><li>exepath &#x3D; hdiffi.exe 和 update_header_v2.exe 所在的路径</li><li>binpath &#x3D; main.bin 所在的路径</li><li>old &#x3D; 「上次编译的程序」所在的路径</li><li>new &#x3D; 「这次编译的程序」所在的路径</li><li>product_code &#x3D; 实际项目的产品代码（这个产品代码是为了避免在升级时升错产品而设置的）</li></ul><p>运行该批处理文件，生成以下文件：</p><ul><li>update.pkg.full.zip.bin 现场用的全量升级包</li><li>update.pkg.diff.zip.bin 测试用的增量升级包</li></ul><p>如果想要程序编译完之后自动调用该脚本，达到自动生成全量升级包的目的，请参照下图修改 EIDE 编译选项。</p><p><img src="/sulfurandcu.io/clnyhr2n3004y10rq322c66uu/update.bat.png"></p><div class="note danger no-icon"><p><strong>注意！</strong>这里生成的增量升级包是本次编译与上次编译之间的差异，仅用于测试，现场实际怎么用请继续往下看。</p></div><h3 id="制作现场用的增量升级包"><a href="#制作现场用的增量升级包" class="headerlink" title="制作现场用的增量升级包"></a>制作现场用的增量升级包</h3><p><strong>用批处理脚本制作</strong></p><p>把旧版程序拷贝到脚本中<code>%binpath%</code>对应的目录，并重命名为<code>%ver%</code>对应的名称。</p><p>运行上面的脚本，生成以下文件：</p><ul><li>update.pkg.diff.zip.specified.version.bin 现场用的增量升级包</li></ul><p><strong>用图形化工具制作</strong></p><ul><li>选择旧版程序</li><li>选择新版程序</li><li>点击生成按钮</li></ul><div class="note info no-icon"><p><strong>批处理脚本</strong>有利于实现自动化，但是用起来有点难度。<strong>图形化工具</strong>用起来比较简单，但是不太好实现自动化。建议两种方式一起使用，各取所长。</p></div><h2 id="如何实现在线升级？"><a href="#如何实现在线升级？" class="headerlink" title="如何实现在线升级？"></a>如何实现在线升级？</h2><h3 id="在引导程序中升级"><a href="#在引导程序中升级" class="headerlink" title="在引导程序中升级"></a>在引导程序中升级</h3><ul><li>使用 USB-485 数据线连接电脑和设备，然后使用串口调试工具打开对应的 COM 口。</li><li>配置串口和传输协议：115200, 8, 1, N, Y-Modem&#x3D;1024。</li><li>敲击键盘上的 TAB 键，引导程序会打印出所有支持的命令。</li><li>执行 download 命令，引导程序进入 ymodem 接收模式，等待上位机下发升级文件。</li><li>在 windterm 中单击右键，选择：传输二进制 -&gt; 发送 YModem。</li><li>选择制作好的升级文件并下发。</li><li>等待文件传输完毕。</li><li>收到升级文件后，引导程序开始执行升级流程。</li><li>待升级流程执行完毕，自动跳转至应用程序。</li></ul><p><strong>参考视频：</strong></p><p><img src="/sulfurandcu.io/clnyhr2n3004y10rq322c66uu/update.flow.gif"></p><h3 id="在应用程序中升级"><a href="#在应用程序中升级" class="headerlink" title="在应用程序中升级"></a>在应用程序中升级</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;FAL, &quot;bootloader&quot;, &quot;chipflash&quot;, addr, size, 0&#125;, /* 引导区 */</span><br><span class="line">&#123;FAL, &quot;update&quot;,     &quot;chipflash&quot;, addr, size, 0&#125;, /* 控制区 */</span><br><span class="line">&#123;FAL, &quot;runapp&quot;,     &quot;chipflash&quot;, addr, size, 0&#125;, /* 运行区 */ /* 原先的旧程序 */</span><br><span class="line"></span><br><span class="line">&#123;FAL, &quot;backup&quot;,     &quot;norflash0&quot;, addr, size, 0&#125;, /* 暂存区 */ /* 备份的旧程序 */ /* 下载的升级包 */</span><br><span class="line">&#123;FAL, &quot;decode&quot;,     &quot;norflash0&quot;, addr, size, 0&#125;, /* 解码区 */ /* 解码的新程序 */</span><br></pre></td></tr></table></figure><ul><li>在应用程序中接收升级文件并存储到 “backup” 分区。</li><li>校验升级文件，如果是差分升级则还要校验旧程序。</li><li>如果校验失败，则将 “backup” 分区擦除，结束。</li><li>如果校验成功，则将 “update” 分区中的升级标识设置为 <code>update_step_verify</code>。</li><li>重启进入引导程序，开始执行升级流程。</li><li>待升级流程执行完毕，自动跳转至应用程序。</li></ul><div class="note info no-icon"><p>为了提高后期的扩展能力，在解析升级包头时要以「变长」的思想来处理。</p></div>]]></content>
    
    
    <summary type="html">&lt;pre class=&quot;mermaid&quot;&gt;
flowchart LR
%%{init: { &amp;quot;flowchart&amp;quot;: { &amp;quot;curve&amp;quot;: &amp;quot;basis&amp;quot; } } }%%
    full_update(全量差分包)
    diff_update(增量差分包)
    app(大程序)
    iap(小程序)
    dnload(数据暂存区)
    backup(数据暂存区)
    runapp(程序运行区)
    decode(数据解码区)

    full_update--&amp;gt;app
    full_update--&amp;gt;iap
    diff_update--&amp;gt;app
    diff_update--&amp;gt;iap

    app--&amp;gt;dnload
    iap--&amp;gt;dnload

    dnload--跳转至小程序--&amp;gt;backup

    backup-.㈣&amp;lt;br&amp;gt;回滚旧程序.-&amp;gt;runapp
    backup--㈠&amp;lt;br&amp;gt;解码升级包--&amp;gt;decode
    decode--㈢&amp;lt;br&amp;gt;写入新程序--&amp;gt;runapp
    runapp--㈡&amp;lt;br&amp;gt;备份旧程序--&amp;gt;backup
&lt;/pre&gt;</summary>
    
    
    
    <category term="开发笔记" scheme="https://sulfurandcu.github.io/sulfurandcu.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="嵌入式软件开发" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="在线升级" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%9C%A8%E7%BA%BF%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式 IAP 在线升级－基础概念</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/clnyhr2n2004x10rq71zl3lqj.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/clnyhr2n2004x10rq71zl3lqj.html</id>
    <published>2023-09-30T16:00:01.000Z</published>
    <updated>2023-09-30T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<center>传统编程方式</center><pre class="mermaid">flowchart LR%%{init: { &quot;flowchart&quot;: { &quot;curve&quot;: &quot;basis&quot; } } }%%A(先取下芯片)---&gt;B(再烧录程序)---&gt;C(后装回板卡)</pre><center>现代编程方式</center><pre class="mermaid">flowchart LR%%{init: { &quot;flowchart&quot;: { &quot;curve&quot;: &quot;basis&quot; } } }%%A(&quot;在电路编程&lt;br&gt;(ＩＣＰ)&quot;)---&gt;B(&quot;在系统编程&lt;br&gt;(ＩＳＰ)&quot;)---&gt;C(&quot;在应用编程&lt;br&gt;(ＩＡＰ)&quot;)</pre><span id="more"></span><h2 id="传统编程方式"><a href="#传统编程方式" class="headerlink" title="传统编程方式"></a>传统编程方式</h2><p>传统编程方式是先将程序烧录至主控芯片中再焊接到电路板上。</p><p><strong>开发阶段</strong></p><ul><li>➀ 从电路板上取下芯片</li><li>➁ 使用烧录器烧写程序</li><li>➂ 将芯片装回至电路板</li></ul><p><strong>量产阶段</strong></p><ul><li>➀ 从 tray 盘取出芯片</li><li>➁ 使用烧录器烧写程序</li><li>➂ 将芯片放回 tray 盘</li></ul><p><strong>维护阶段</strong></p><ul><li>➀ 从电路板上拆下芯片</li><li>➁ 使用烧录器烧写程序</li><li>➂ 将芯片焊回至电路板</li></ul><h2 id="现代编程方式"><a href="#现代编程方式" class="headerlink" title="现代编程方式"></a>现代编程方式</h2><p>现代编程方式可以直接进行板上烧录，不用再取下芯片放到专用的烧录器上烧录，极大地提高了开发、生产以及维护效率。</p><p>现代编程方式又可分为：</p><ul><li>在电路编程 ICP (Circuit)</li><li>在系统编程 ISP (System)</li><li>在应用编程 IAP (Application)</li></ul><table><thead><tr><th align="center">编程方式</th><th align="center">在电路编程</th><th align="center">在系统编程</th><th align="center">在应用编程</th></tr></thead><tbody><tr><td align="center">核心思想</td><td align="center">借助外部烧录器<br>通过JTAG&#x2F;SWD接口<br>实现在电路编程</td><td align="center">借助芯片内部<br>固化的引导程序和BOOT引脚<br>以及片上接口<br>实现在系统编程</td><td align="center">借助用户自己<br>编写的引导程序、应用程序<br>以及片上接口、板上接口<br>实现在应用编程</td></tr><tr><td align="center">引导程序</td><td align="center">不需要</td><td align="center">需要芯片厂家编写<br>并固化到某一地址空间</td><td align="center">需要用户自己编写<br>并烧录至内部flash存储器</td></tr><tr><td align="center">进入方式</td><td align="center">随时待命</td><td align="center">需要更改BOOT引脚的电平<br>然后硬件复位<br>进入内部固化的引导程序</td><td align="center">随时待命</td></tr><tr><td align="center">配套软件</td><td align="center">烧录软件</td><td align="center">芯片厂家提供的<br>上位机ISP编程软件</td><td align="center">用户自己开发的数据传输软件</td></tr><tr><td align="center">通信接口</td><td align="center">JTAG&#x2F;SWD</td><td align="center">取决于芯片中固化的引导程序<br>URT&#x2F;SPI&#x2F;IIC&#x2F;CAN&#x2F;USB</td><td align="center">理论上可以支持任意接口<br>URT&#x2F;SPI&#x2F;IIC<br>485&#x2F;CAN&#x2F;USB<br>WiFi&#x2F;BLE&#x2F;IrDA<br>PLC&#x2F;ETH&#x2F;4G&#x2F;5G&#x2F;NBIoT</td></tr><tr><td align="center">程序升级<br>是否需要<br>拆装芯片</td><td align="center">不需要<br>拆装芯片</td><td align="center">不需要<br>拆装芯片</td><td align="center">不需要<br>拆装芯片</td></tr><tr><td align="center">程序升级<br>是否需要<br>拆装外壳</td><td align="center">需要<br>拆开设备外壳</td><td align="center">通信接口完备的情况下<br>不需要<br>拆开设备外壳<br>485&#x2F;CAN&#x2F;USB</td><td align="center">通信接口完备的情况下<br>不需要<br>拆开设备外壳<br>485&#x2F;CAN&#x2F;USB&#x2F;WiFi&#x2F;BLE&#x2F;IrDA</td></tr><tr><td align="center">程序升级<br>是否需要<br>前往现场</td><td align="center">需要<br>前往设备安装现场</td><td align="center">需要<br>前往设备安装现场</td><td align="center">远程通信功能完备的情况下<br>不需要<br>前往设备安装现场<br>PLC&#x2F;ETH&#x2F;4G&#x2F;5G&#x2F;NBIoT</td></tr></tbody></table><div class="note info no-icon"><p>ICP 主要是在开发阶段使用，其烧录速度是 ISP 和 IAP 所无法比拟的。</p></div><div class="note info no-icon"><p>IAP 与 ISP 类似，都有 bootloader 引导程序，因此无需使用烧录器。二者的区别在于，ISP 的引导程序由芯片厂家编写，比较简单，无法实现用户的定制化需求；而 IAP 的引导程序是由用户自己实现，可以根据需求自行修改。另外 ISP 进入 boot 程序的方式是通过更改 BOOT 引脚的电平；而 IAP 则是从用户程序中通过软件复位或者跳转的方式直接进入 bootloader 程序，因此相较于 ISP 来说会更加灵活。</p></div><div class="note info no-icon"><p>通过 WiFi&#x2F;BLE&#x2F;4G&#x2F;5G&#x2F;NBIoT 等无线通信技术实现 IAP 功能的方案也被称作 OTA 空中下载技术。</p></div><table><thead><tr><th align="center">BOOT1</th><th align="center">BOOT0</th><th align="center">BOOT MODE</th></tr></thead><tbody><tr><td align="center">X</td><td align="center">0</td><td align="center">boot from 0x08000000 : main memory</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">boot from 0x1FFF0000 : boot memory</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">boot from 0x20000000 : sram memory</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;center&gt;传统编程方式&lt;/center&gt;

&lt;pre class=&quot;mermaid&quot;&gt;
flowchart LR
%%{init: { &amp;quot;flowchart&amp;quot;: { &amp;quot;curve&amp;quot;: &amp;quot;basis&amp;quot; } } }%%
A(先取下芯片)---&amp;gt;B(再烧录程序)---&amp;gt;C(后装回板卡)
&lt;/pre&gt;

&lt;center&gt;现代编程方式&lt;/center&gt;

&lt;pre class=&quot;mermaid&quot;&gt;
flowchart LR
%%{init: { &amp;quot;flowchart&amp;quot;: { &amp;quot;curve&amp;quot;: &amp;quot;basis&amp;quot; } } }%%
A(&amp;quot;在电路编程&amp;lt;br&amp;gt;(ＩＣＰ)&amp;quot;)---&amp;gt;B(&amp;quot;在系统编程&amp;lt;br&amp;gt;(ＩＳＰ)&amp;quot;)---&amp;gt;C(&amp;quot;在应用编程&amp;lt;br&amp;gt;(ＩＡＰ)&amp;quot;)
&lt;/pre&gt;</summary>
    
    
    
    <category term="开发笔记" scheme="https://sulfurandcu.github.io/sulfurandcu.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="嵌入式软件开发" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="在线升级" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%9C%A8%E7%BA%BF%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式 IAP 在线升级－目录索引</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/clnyhr2n2004t10rq7rdi2ftx.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/clnyhr2n2004t10rq7rdi2ftx.html</id>
    <published>2023-09-30T16:00:00.000Z</published>
    <updated>2023-09-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="/sulfurandcu.io/clnyhr2n2004x10rq71zl3lqj.html">在线升级（#01）基础概念</a><br><a href="/sulfurandcu.io/clnyhr2n3004y10rq322c66uu.html">在线升级（#02）整体方案</a><br><a href="/sulfurandcu.io/clnyhr2n4005410rqfyjmedv1.html">在线升级（#03）程序设计</a><br><a href="/sulfurandcu.io/cloidefbf00hzv0rqa7zg722r.html">在线升级（#04）差分还原 hpatchlite 移植</a></p><hr><span id="more"></span><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://itexp.blog.csdn.net/article/details/83793309">https://itexp.blog.csdn.net/article/details/83793309</a></p><p><a href="https://blog.csdn.net/qq_24130227/article/details/123752964">https://blog.csdn.net/qq_24130227/article/details/123752964</a><br><a href="https://blog.csdn.net/qq_24130227/article/details/108379324">https://blog.csdn.net/qq_24130227/article/details/108379324</a><br><a href="https://blog.csdn.net/qq_24130227/article/details/113003329">https://blog.csdn.net/qq_24130227/article/details/113003329</a><br><a href="https://blog.csdn.net/qq_24130227/article/details/120061873">https://blog.csdn.net/qq_24130227/article/details/120061873</a><br><a href="https://blog.csdn.net/qq_24130227/article/details/108427842">https://blog.csdn.net/qq_24130227/article/details/108427842</a></p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;/sulfurandcu.io/clnyhr2n2004x10rq71zl3lqj.html&quot;&gt;在线升级（#01）基础概念&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;/sulfurandcu.io/clnyhr2n3004y10rq322c66uu.html&quot;&gt;在线升级（#02）整体方案&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;/sulfurandcu.io/clnyhr2n4005410rqfyjmedv1.html&quot;&gt;在线升级（#03）程序设计&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;/sulfurandcu.io/cloidefbf00hzv0rqa7zg722r.html&quot;&gt;在线升级（#04）差分还原 hpatchlite 移植&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="开发笔记" scheme="https://sulfurandcu.github.io/sulfurandcu.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="嵌入式软件开发" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="单片机" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="iap" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/iap/"/>
    
    <category term="bootloader" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/bootloader/"/>
    
  </entry>
  
  <entry>
    <title>问题记录：华大 HC32F460 滤波电路失效</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/clorxokmu004nmgrq9tl4hiss.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/clorxokmu004nmgrq9tl4hiss.html</id>
    <published>2023-08-08T16:00:00.000Z</published>
    <updated>2023-08-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用电压比较器时发现硬件滤波电路会出现失效的情况，经分析是其采样频率过高所致。</p><p><img src="/sulfurandcu.io/clorxokmu004nmgrq9tl4hiss/manual.png"></p><p>参考手册中绘制的是理想条件下的波形，真实情况并非如此，INP 在逼近 INM 时会伴随着噪声&#x2F;抖动。我们可以使用硬件滤波电路来消除这种抖动，图中绿色线段表示各采样点，其频率即为采样频率。</p><iframe src="https://www.desmos.com/calculator/7r0bi5urxv?embed" width="800" height="500" style="border: 1px solid #ccc" frameborder=0></iframe><p>采样频率较低时，滤波电路可以正常工作，但是随着采样频率的升高，其可靠性反而会降低。</p><span id="more"></span><iframe src="https://www.desmos.com/calculator/2kz1rewo6h?embed" width="800" height="500" style="border: 1px solid #ccc" frameborder=0></iframe><iframe src="https://www.desmos.com/calculator/2py3qizn5x?embed" width="800" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在使用电压比较器时发现硬件滤波电路会出现失效的情况，经分析是其采样频率过高所致。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sulfurandcu.io/clorxokmu004nmgrq9tl4hiss/manual.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;参考手册中绘制的是理想条件下的波形，真实情况并非如此，INP 在逼近 INM 时会伴随着噪声&amp;#x2F;抖动。我们可以使用硬件滤波电路来消除这种抖动，图中绿色线段表示各采样点，其频率即为采样频率。&lt;/p&gt;
&lt;iframe src=&quot;https://www.desmos.com/calculator/7r0bi5urxv?embed&quot; width=&quot;800&quot; height=&quot;500&quot; style=&quot;border: 1px solid #ccc&quot; frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;采样频率较低时，滤波电路可以正常工作，但是随着采样频率的升高，其可靠性反而会降低。&lt;/p&gt;</summary>
    
    
    
    <category term="问题记录" scheme="https://sulfurandcu.github.io/sulfurandcu.io/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="华大半导体" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%8D%8E%E5%A4%A7%E5%8D%8A%E5%AF%BC%E4%BD%93/"/>
    
    <category term="HC32F460" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/HC32F460/"/>
    
  </entry>
  
  <entry>
    <title>问题记录：华大 HC32F460 切换运行模式导致宕机</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/cloqsamms004qg4rq5jubc4h4.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/cloqsamms004qg4rq5jubc4h4.html</id>
    <published>2023-07-26T16:00:00.000Z</published>
    <updated>2023-07-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h2><ul><li>从高速&#x2F;超高速模式向超低速模式切换时 mcu 异常死机</li></ul><h2 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h2><ul><li>当前使用华大 2.2.0 版驱动程序</li><li>当前使用华大 1.2.1 版参考手册</li></ul><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>通过调试发现每次运行至 <code>M4_SYSREG-&gt;PWR_PWRC2</code> 赋值时程序就会跑飞😶</p><p><img src="/sulfurandcu.io/cloqsamms004qg4rq5jubc4h4/HC32F460-RM-Rev1.2-Register.png" alt="电源模式控制寄存器 2"></p><figure class="highlight c"><figcaption><span>hc32f460_pwc.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">en_result_t</span> <span class="title function_">PWC_HS2LS</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    M4_SYSREG-&gt;PWR_PWRC2 = <span class="number">0xE1</span>U;</span><br><span class="line">    M4_SYSREG-&gt;PWR_MDSWCR = <span class="number">0x10</span>U;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">en_result_t</span> <span class="title function_">PWC_HP2LS</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    M4_SYSREG-&gt;PWR_PWRC2 = <span class="number">0xD1</span>U;</span><br><span class="line">    M4_SYSREG-&gt;PWR_MDSWCR = <span class="number">0x10</span>U;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>瞅了一眼《参考手册 Rev1.2.1》好像也没啥问题，又看了《参考手册 Rev1.3》后，我得发…🙄！</p><p>两版手册竟然不一样！</p><span id="more"></span><h3 id="Rev1-2-1"><a href="#Rev1-2-1" class="headerlink" title="Rev1.2.1"></a>Rev1.2.1</h3><p><img src="/sulfurandcu.io/cloqsamms004qg4rq5jubc4h4/HC32F460-RM-Rev1.2.png" alt="运行模式的切换流程（Rev1.2）"></p><h3 id="Rev1-3-0"><a href="#Rev1-3-0" class="headerlink" title="Rev1.3.0"></a>Rev1.3.0</h3><p><img src="/sulfurandcu.io/cloqsamms004qg4rq5jubc4h4/HC32F460-RM-Rev1.3.png" alt="运行模式的切换流程（Rev1.3）"></p><p>这妥妥的是华大的锅了…</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;现象描述&quot;&gt;&lt;a href=&quot;#现象描述&quot; class=&quot;headerlink&quot; title=&quot;现象描述&quot;&gt;&lt;/a&gt;现象描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;从高速&amp;#x2F;超高速模式向超低速模式切换时 mcu 异常死机&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;基础信息&quot;&gt;&lt;a href=&quot;#基础信息&quot; class=&quot;headerlink&quot; title=&quot;基础信息&quot;&gt;&lt;/a&gt;基础信息&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当前使用华大 2.2.0 版驱动程序&lt;/li&gt;
&lt;li&gt;当前使用华大 1.2.1 版参考手册&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;原因分析&quot;&gt;&lt;a href=&quot;#原因分析&quot; class=&quot;headerlink&quot; title=&quot;原因分析&quot;&gt;&lt;/a&gt;原因分析&lt;/h2&gt;&lt;p&gt;通过调试发现每次运行至 &lt;code&gt;M4_SYSREG-&amp;gt;PWR_PWRC2&lt;/code&gt; 赋值时程序就会跑飞😶&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sulfurandcu.io/cloqsamms004qg4rq5jubc4h4/HC32F460-RM-Rev1.2-Register.png&quot; alt=&quot;电源模式控制寄存器 2&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;figcaption&gt;&lt;span&gt;hc32f460_pwc.c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;en_result_t&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;PWC_HS2LS&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    M4_SYSREG-&amp;gt;PWR_PWRC2 = &lt;span class=&quot;number&quot;&gt;0xE1&lt;/span&gt;U;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    M4_SYSREG-&amp;gt;PWR_MDSWCR = &lt;span class=&quot;number&quot;&gt;0x10&lt;/span&gt;U;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;en_result_t&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;PWC_HP2LS&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    M4_SYSREG-&amp;gt;PWR_PWRC2 = &lt;span class=&quot;number&quot;&gt;0xD1&lt;/span&gt;U;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    M4_SYSREG-&amp;gt;PWR_MDSWCR = &lt;span class=&quot;number&quot;&gt;0x10&lt;/span&gt;U;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;瞅了一眼《参考手册 Rev1.2.1》好像也没啥问题，又看了《参考手册 Rev1.3》后，我得发…🙄！&lt;/p&gt;
&lt;p&gt;两版手册竟然不一样！&lt;/p&gt;</summary>
    
    
    
    <category term="问题记录" scheme="https://sulfurandcu.github.io/sulfurandcu.io/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="华大半导体" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%8D%8E%E5%A4%A7%E5%8D%8A%E5%AF%BC%E4%BD%93/"/>
    
    <category term="HC32F460" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/HC32F460/"/>
    
  </entry>
  
  <entry>
    <title>开发指南：华大 HC32F460 时钟控制单元</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup.html</id>
    <published>2023-07-16T16:00:00.000Z</published>
    <updated>2023-07-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="clock"><a href="#clock" class="headerlink" title="clock"></a>clock</h2><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/clock-tree-sketch.png"></p><span id="more"></span><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/clock-tree-manual.png"></p><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/clock-work.png"></p><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/clock-work-manual.png"></p><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/clock-work-note.png"></p><h2 id="pll"><a href="#pll" class="headerlink" title="pll"></a>pll</h2><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/pll.png"></p><h2 id="systick"><a href="#systick" class="headerlink" title="systick"></a>systick</h2><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/systick.png"></p><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/systick-manual.jpg"></p><center>《ARM ® CortexM4 Devices Generic User Guide》</center><br><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/systick-register.png"></p><center>hc32f460's systick control and status register</center><br><div class="note danger no-icon"><p>华大 HC32F460 的 systick 嘀嗒定时器使用内核时钟（HCLK）</p></div><figure class="highlight c"><figcaption><span>HC32F460.h</span></figcaption><table><tr><td class="code"><pre><span class="line">********************************************************************************</span><br><span class="line">* @file  HC32F460.h</span><br><span class="line">* @brief Headerfile <span class="keyword">for</span> HC32F460 series MCU</span><br><span class="line">********************************************************************************</span><br><span class="line"></span><br><span class="line">********************************************************************************</span><br><span class="line">Configuration of the Cortex-M4 Processor and Core Peripherals</span><br><span class="line">********************************************************************************</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __CM4_REV                 1     <span class="comment">// !&lt; Core revision r0p1</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __FPU_PRESENT             1     <span class="comment">// !&lt; FPU present</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MPU_PRESENT             1     <span class="comment">// !&lt; HC32F460 provides an MPU</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NVIC_PRIO_BITS          4     <span class="comment">// !&lt; HC32F460 uses 4 Bits for the Priority Levels</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __Vendor_SysTickConfig    0     <span class="comment">// !&lt; Set to 1 if different SysTick Config is used</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>core_cm4.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined (__Vendor_SysTickConfig) &amp;&amp; (__Vendor_SysTickConfig == 0U)</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">SysTick_Config</span><span class="params">(<span class="type">uint32_t</span> ticks)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><div class="note danger no-icon"><p>华大 HC32F460 的 systick 嘀嗒定时器使用 cmsis(core_cm4.h) 中默认的配置函数</p></div><h2 id="外设时钟源（URT）"><a href="#外设时钟源（URT）" class="headerlink" title="外设时钟源（URT）"></a>外设时钟源（URT）</h2><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/PCLK1-URT.png"></p><center>÷2 表示开启过采样功能</center><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/PCLK1-URT-example.png"></p><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/PCLK1-URT-baudrate-manual.jpg"></p><!--公式使用工具 https://latexlive.com/ 生成\begin{align}& Baudrate = \frac{串口频率}{08\ \times\ (1\ +整数分频寄存器)} \ \ \ \ (关闭过采样) \\& Baudrate = \frac{串口频率}{16\ \times\ (1\ +整数分频寄存器)} \ \ \ \ (开启过采样) \\\end{align}--></p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mtable columnalign="right left right left right left right left right left right left" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" rowspacing="3pt" displaystyle="true"><mtr><mtd></mtd><mtd><mi>B</mi><mi>a</mi><mi>u</mi><mi>d</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo>=</mo><mfrac><mrow><mo>串口频率</mo></mrow><mrow><mn>08</mn><mtext>&nbsp;</mtext><mo>×</mo><mtext>&nbsp;</mtext><mo stretchy="false">(</mo><mn>1</mn><mtext>&nbsp;</mtext><mo>+</mo><mo>整数分频寄存器</mo><mo stretchy="false">)</mo></mrow></mfrac><mtext>&nbsp;</mtext><mtext>&nbsp;</mtext><mtext>&nbsp;</mtext><mtext>&nbsp;</mtext><mo stretchy="false">(</mo><mo>关闭过采样</mo><mo stretchy="false">)</mo></mtd></mtr></mtable></math><br><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mtable columnalign="right left right left right left right left right left right left" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" rowspacing="3pt" displaystyle="true"><mtr><mtd></mtd><mtd><mi>B</mi><mi>a</mi><mi>u</mi><mi>d</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo>=</mo><mfrac><mrow><mo>串口频率</mo></mrow><mrow><mn>16</mn><mtext>&nbsp;</mtext><mo>×</mo><mtext>&nbsp;</mtext><mo stretchy="false">(</mo><mn>1</mn><mtext>&nbsp;</mtext><mo>+</mo><mo>整数分频寄存器</mo><mo stretchy="false">)</mo></mrow></mfrac><mtext>&nbsp;</mtext><mtext>&nbsp;</mtext><mtext>&nbsp;</mtext><mtext>&nbsp;</mtext><mo stretchy="false">(</mo><mo>开启过采样</mo><mo stretchy="false">)</mo></mtd></mtr></mtable></math><br><div class="note info no-icon"><p>公式中整数分频寄存器的取值范围为 0x00 ~ 0xFF（USART_BRR[b15~b08]）</p></div><h2 id="外设时钟源（SPI）"><a href="#外设时钟源（SPI）" class="headerlink" title="外设时钟源（SPI）"></a>外设时钟源（SPI）</h2><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/PCLK1-SPI.png"></p><h2 id="外设时钟源（I2C）"><a href="#外设时钟源（I2C）" class="headerlink" title="外设时钟源（I2C）"></a>外设时钟源（I2C）</h2><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/PCLK3-I2C.png"></p><h2 id="外设时钟源（CMP）"><a href="#外设时钟源（CMP）" class="headerlink" title="外设时钟源（CMP）"></a>外设时钟源（CMP）</h2><p><img src="/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/PCLK3-CMP.png"></p><div class="note danger no-icon"><p>比较滤波器的采样频率越低→滤波效果越好！</p></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;clock&quot;&gt;&lt;a href=&quot;#clock&quot; class=&quot;headerlink&quot; title=&quot;clock&quot;&gt;&lt;/a&gt;clock&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/sulfurandcu.io/cloqtbfnv000dmgrq0l3acbup/clock-tree-sketch.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="开发笔记" scheme="https://sulfurandcu.github.io/sulfurandcu.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="华大半导体" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%8D%8E%E5%A4%A7%E5%8D%8A%E5%AF%BC%E4%BD%93/"/>
    
    <category term="HC32F460" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/HC32F460/"/>
    
  </entry>
  
  <entry>
    <title>集成开发环境－合集</title>
    <link href="https://sulfurandcu.github.io/sulfurandcu.io/clo3okqut006mi0rq9ecvb34e.html"/>
    <id>https://sulfurandcu.github.io/sulfurandcu.io/clo3okqut006mi0rq9ecvb34e.html</id>
    <published>2023-07-04T16:00:00.000Z</published>
    <updated>2023-07-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>各个平台下的开发环境搭建教程</p><ul><li><a href="/sulfurandcu.io/clo2c1l6m00de1wrqg1jcfbqd.html">ARM.GCC</a></li><li><a href="/sulfurandcu.io/404/index.html">ARM.MDK (TODO)</a></li><li><a href="/sulfurandcu.io/404/index.html">ARM.IAR (TODO)</a></li><li><a href="/sulfurandcu.io/404/index.html">ARM.SES (TODO)</a></li><li><a href="/sulfurandcu.io/404/index.html">ARM.ADS (TODO)</a></li><li><a href="/sulfurandcu.io/404/index.html">RV5.GCC (TODO)</a></li><li><a href="/sulfurandcu.io/404/index.html">RV5.IAR (TODO)</a></li><li><a href="/sulfurandcu.io/404/index.html">RV5.SES (TODO)</a></li><li><a href="/sulfurandcu.io/404/index.html">C51.MDK (TODO)</a></li><li><a href="/sulfurandcu.io/404/index.html">C51.IAR (TODO)</a></li><li><a href="/sulfurandcu.io/404/index.html">MSP.IAR (TODO)</a></li><li><a href="/sulfurandcu.io/404/index.html">AVR.IAR (TODO)</a></li><li><a href="/sulfurandcu.io/404/index.html">PIC.XXX (TODO)</a></li></ul><hr><span id="more"></span><h2 id="搭建方案"><a href="#搭建方案" class="headerlink" title="搭建方案"></a>搭建方案</h2><ul><li><strong>VSC</strong><ul><li><a href="https://devblogs.microsoft.com/cppblog/vscode-embedded-development/">Microsoft Embedded Tools</a></li><li><a href="https://github.com/Marus/cortex-debug/wiki">Cortex Debug</a></li><li><a href="https://em-ide.com/zh-cn/">Embedded IDE</a></li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v4.3.1/esp32/index.html">vscode for espidf</a></li><li><a href="https://www.essemi.com/index/article/plist?cid=141">vscode for essemi</a></li></ul></li><li><strong>VS</strong><ul><li><a href="https://devblogs.microsoft.com/cppblog/visual-studio-embedded-development/">Microsoft Embedded Software Development in Visual Studio</a></li><li><a href="https://visualgdb.com/">VisualGDB by SysPROGS</a></li></ul></li><li><strong>Eclipse</strong></li><li><strong>Eclipse Based</strong><ul><li><a href="https://www.rt-thread.io/studio.html">EclipseBased: RT-Thread Studio</a></li><li><a href="http://www.mounriver.com/">EclipseBased: MounRiver Studio</a></li><li><a href="https://www.rvmcu.com/nucleistudio.html">EclipseBased: NucleiIDE Studio</a></li></ul></li></ul><h2 id="通用方案"><a href="#通用方案" class="headerlink" title="通用方案"></a>通用方案</h2><ul><li><a href="https://www.keil.arm.com/">KeilStudioCloud</a></li><li><a href="https://developer.arm.com/Tools%20and%20Software/Arm%20Development%20Studio">ADS</a><ul><li>ARM</li></ul></li><li><a href="https://www.keil.com/">MDK</a><ul><li>ARM <a href="https://www.keil.com/pr/article/1302.htm">(ARM 6 Will start shipping towards The End of 2023)</a></li><li>C51</li></ul></li><li><a href="https://www.iar.com/products/architectures/">IAR</a><ul><li>RV5</li><li>ARM</li><li>AVR</li><li>MSP</li><li>STM</li><li>C51</li></ul></li><li><a href="https://www.segger.com/products/development-tools/embedded-studio/">SES</a><ul><li>ARM</li><li>RV5</li></ul></li><li><a href="https://embeetle.com/#">EmbeetleIDE</a></li></ul><h2 id="专用方案"><a href="#专用方案" class="headerlink" title="专用方案"></a>专用方案</h2><ul><li><strong>Eclipse Based</strong><ul><li><a href="https://www.st.com/en/development-tools/sw4stm32.html">ST: SW4STM32 System Workbench for STM32</a></li><li><a href="https://www.st.com/en/development-tools/truestudio.html">ST: TrueStudio by Atollic before 2017</a></li><li><a href="">ST: STM32CubeIDE release in 2019 &#x3D; TrueStudio+STM32CubeMX</a></li><li><a href="https://www.renesas.com/us/en/software-tool/e-studio">Renesas: E2Studio</a></li></ul></li><li><strong>NetBeans Based</strong><ul><li><a href="https://www.microchip.com/en-us/tools-resources/develop/mplab-x-ide">Microchip: MPLAB X IDE</a></li></ul></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://elmagnifico.tech/2022/03/14/Embeded-IDE/">https://elmagnifico.tech/2022/03/14/Embeded-IDE/</a><br><a href="https://elmagnifico.tech/2022/03/15/Embedded-Software-Development-VS-VSC/">https://elmagnifico.tech/2022/03/15/Embedded-Software-Development-VS-VSC/</a></p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;各个平台下的开发环境搭建教程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/sulfurandcu.io/clo2c1l6m00de1wrqg1jcfbqd.html&quot;&gt;ARM.GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/sulfurandcu.io/404/index.html&quot;&gt;ARM.MDK (TODO)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/sulfurandcu.io/404/index.html&quot;&gt;ARM.IAR (TODO)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/sulfurandcu.io/404/index.html&quot;&gt;ARM.SES (TODO)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/sulfurandcu.io/404/index.html&quot;&gt;ARM.ADS (TODO)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/sulfurandcu.io/404/index.html&quot;&gt;RV5.GCC (TODO)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/sulfurandcu.io/404/index.html&quot;&gt;RV5.IAR (TODO)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/sulfurandcu.io/404/index.html&quot;&gt;RV5.SES (TODO)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/sulfurandcu.io/404/index.html&quot;&gt;C51.MDK (TODO)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/sulfurandcu.io/404/index.html&quot;&gt;C51.IAR (TODO)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/sulfurandcu.io/404/index.html&quot;&gt;MSP.IAR (TODO)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/sulfurandcu.io/404/index.html&quot;&gt;AVR.IAR (TODO)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/sulfurandcu.io/404/index.html&quot;&gt;PIC.XXX (TODO)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="开发笔记" scheme="https://sulfurandcu.github.io/sulfurandcu.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="嵌入式软件开发" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="集成开发环境" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    <category term="IDE" scheme="https://sulfurandcu.github.io/sulfurandcu.io/tags/IDE/"/>
    
  </entry>
  
</feed>
